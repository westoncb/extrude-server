{"version":3,"sources":["PGRenderer.js","Util.js","Player.js","Playground.js","ModelFactory.js","components/PlayerView.js","components/ChatWindow.js","MainCanvas.js","components/LoginPrompt.js","App.js","serviceWorker.js","index.js"],"names":["PGRenderer","root","Object3D","playerId","direction","Util","length","result","characters","charactersLength","i","charAt","Math","floor","random","obj3d","options","allMeshes","walkNodes","node","geometry","excludedTypes","includes","userData","objectType","push","totalBox","Box3","forEach","mesh","updateMatrixWorld","geometryCopy","clone","applyMatrix","matrixWorld","computeBoundingBox","union","boundingBox","func","children","min","max","vector","camera","canvasWidth","canvasHeight","vectorCopy","widthHalf","heightHalf","project","x","y","Player","name","randString","id","round","position","Vector3","rand","visibleMessages","player","message","slice","shift","Playground","updatePlayers","updateMessagesFunc","socket","renderer","state","players","messages","this","connectToServer","io","emit","type","on","data","console","log","handleServerEvent","event","getPlayersArray","serverKeyDown","serverKeyUp","messageDisplayTime","addMessage","setTimeout","removeOldestMessage","Object","values","concat","keys","map","key","startPlayerMovement","KEY_TO_DIRECTION","stopPlayerMovement","e","RECOGNIZED_KEYS","time","Date","a","w","s","d","MD2_CONTROLS","moveForward","moveBackward","moveLeft","moveRight","crouch","jump","attack","ModelFactory","configOgro","baseUrl","body","skins","weapons","animations","move","idle","crouchMove","crouchIdle","crouchAttach","walkSpeed","crouchSpeed","skinCount","base","MD2CharacterComplex","scale","basePromise","Promise","resolve","reject","onLoadComplete","enableShadows","setSkin","loadParts","skin","instanceIndex","instance","controls","getControlsCopy","then","shareParts","setWeapon","init","PlayerView","useState","md2","setMd2","height","setHeight","useEffect","getModelInstance","bbox","computeCompositeBoundingBox","getSize","useFrame","info","set","z","update","object","center","className","style","transform","ChatWindow","sendChatMessage","inputText","setInputText","placeholder","large","onKeyDown","which","value","onChange","target","extend","OrbitControls","stats","Stats","CameraController","useThree","gl","domElement","appendChild","dom","dispose","MainCanvas","setPlayers","setMessages","playground","setPlayground","grassTexture","useMemo","THREE","load","backgroundColor","antialias","alpha","pixelRatio","window","devicePixelRatio","near","far","shadowMap","onCreated","toneMapping","outputEncoding","attach","args","shadow-camera-left","shadow-camera-bottom","shadow-camera-right","shadow-camera-top","shadow-camera-near","shadow-camera-far","shadow-mapSize-width","shadow-mapSize-height","castShadow","receiveShadow","rotation-x","PI","color","repeat","wrapS","wrapT","encoding","bind","LoginPrompt","logIn","setName","label","autoFocus","text","create","onClick","App","loggedIn","setLoggedIn","setPlayer","doLogin","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.2e9acce6.chunk.js","sourcesContent":["import Playground from './Playground'\nimport { Object3D } from 'three'\n\nclass PGRenderer {\n    root = new Object3D\n\n    startPlayerMovement(playerId, direction) {\n\n    }\n\n    stopPlayerMovement(playerId, direction) {\n\n    }\n}\n\nexport default PGRenderer","import {Box3} from 'three'\n\nclass Util {\n    static randString(length) {\n        var result = ''\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n        var charactersLength = characters.length\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() * charactersLength))\n        }\n        return result\n    }\n\n    /*\n        Computes a bounding box which is the union of the geometry\n        belonging to the passed in node and all descendent meshes.\n        This exists because the Three.Box3().setFromObject() method\n        is broken—possibly having to do with THREE.Group nodes.\n    */\n    static computeCompositeBoundingBox(obj3d, options = {}) {\n        const allMeshes = [];\n\n        Util.walkNodes(obj3d, node => {\n            if (node.geometry) {\n                const notExcluded =\n                    !options.excludedTypes ||\n                    !options.excludedTypes.includes(node.userData.objectType);\n\n                if (notExcluded) allMeshes.push(node);\n            }\n        });\n\n        let totalBox = new Box3();\n        allMeshes.forEach(mesh => {\n            mesh.updateMatrixWorld();\n            const geometryCopy = mesh.geometry.clone();\n            geometryCopy.applyMatrix(mesh.matrixWorld);\n            geometryCopy.computeBoundingBox();\n            totalBox = totalBox.union(geometryCopy.boundingBox);\n        });\n\n        return totalBox;\n    }\n\n    /*\n        Depth first walk of a three.js node and all of its children.\n        The passed in function is called at each node, and the current\n        node is passed in as the sole argument.\n    */\n    static walkNodes(node, func) {\n        func(node);\n\n        for (let i = 0; i < node.children.length; i += 1) {\n            Util.walkNodes(node.children[i], func);\n        }\n    }\n\n    static rand(min, max) {\n        return Math.random() * (max - min) + min\n    }\n\n    static vec3ToScreenPoint(vector, camera, canvasWidth, canvasHeight) {\n        // Make a copy since .project(...) will transform the vector\n        const vectorCopy = vector.clone();\n\n        const widthHalf = 0.5 * canvasWidth;\n        const heightHalf = 0.5 * canvasHeight;\n\n        vectorCopy.project(camera);\n\n        vectorCopy.x = vectorCopy.x * widthHalf + widthHalf;\n        vectorCopy.y = -(vectorCopy.y * heightHalf) + heightHalf;\n\n        return {\n            x: vectorCopy.x,\n            y: vectorCopy.y,\n        };\n    }\n}\n\nexport default Util","import  {Vector3} from \"three\"\nimport Util from './Util'\n\nclass Player {\n\n    static create(name = Util.randString(5)) {\n        return  {\n                    name,\n                    id: \"\"+Math.round(Math.random() * 10000), //Important this is a string!\n                    position: new Vector3(Util.rand(-250, 250), 0, Util.rand(-250, 250)),\n                    visibleMessages: []\n                }\n    }\n\n    static addMessage(player, message) {\n        const newPlayer = {...player, visibleMessages: [...player.visibleMessages, message]}\n        return newPlayer\n    }\n\n    static removeOldestMessage(player) {\n        const visibleMessages = player.visibleMessages.slice()\n        visibleMessages.shift()\n        return {...player, visibleMessages}\n    }\n}\n\nexport default Player","import io from \"socket.io-client\"\nimport PGRenderer from './PGRenderer'\nimport Player from './Player'\nimport React, {useEffect, useMemo} from 'react'\n\nconst isProduction = process.env.NODE_ENV !== 'development'\nconst port = 3000\nconst devURL = \"localhost:\" + port\nconst prodURL = \"https://nameless-depths-23573.herokuapp.com\"\nconst serverURL = isProduction ? prodURL : devURL\n\nclass Playground {\n    player = null\n    socket = null\n    renderer = new PGRenderer()\n    state = {players: {}}\n    messages = []\n\n    static RECOGNIZED_KEYS = [\"a\", \"w\", \"s\", \"d\"]\n    static KEY_TO_DIRECTION = { a: 'left', w: \"up\", s: \"down\", d: \"right\"}\n\n    constructor(player, updatePlayers, updateMessagesFunc) {\n        this.player = player\n        this.updatePlayers = updatePlayers\n        this.updateMessagesFunc = updateMessagesFunc\n\n        this.connectToServer(this.player)    \n    }\n\n    connectToServer(player) {\n        this.socket = io(serverURL)\n        this.socket.emit(\"event\", { type: \"player_enter_request\", player })\n\n        this.socket.on(\"event\", data => {\n            console.log(\"server event: \", data)\n\n            this.handleServerEvent(data)\n        })\n\n        this.socket.on(\"disconnect\", data => {\n            // This is a hack: it's not a server event, but we\n            // want to use the same logic for now\n            this.handleServerEvent({type: \"player_exit\", player})\n        })\n\n        this.socket.on(\"reconnect\", data => {\n            this.socket.emit(\"event\", { type: \"player_enter_request\", player })\n        })\n    }\n\n    handleServerEvent(event) {\n        switch (event.type) {\n            case \"player_enter\":\n                console.log(\"player_enter: \", event.player)\n                this.state.players[event.player.id] = event.player\n                this.updatePlayers(this.getPlayersArray())\n                break;\n            case \"player_exit\":\n                if (this.state.players[event.player.id]) {\n                    delete this.state.players[event.player.id]\n                    this.updatePlayers(this.getPlayersArray())\n                }\n                break;\n            case \"full_state_request\":\n                this.socket.emit(\"event\", { type: \"full_state_response\", state: this.state})\n                break;\n            case \"full_state_update\":\n                this.state = event.state\n                this.updatePlayers(this.getPlayersArray())\n                break;\n            case \"input_key_down\":\n                this.serverKeyDown(event)\n                break;\n            case \"input_key_up\":\n                this.serverKeyUp(event)\n                break;\n            case \"input_mouse_move\":\n\n                break;\n            case \"input_click\":\n\n                break;\n            case \"chat_message\":\n\n                if (!this.state.players[event.playerId])\n                    break;\n\n                const player = this.state.players[event.playerId]\n                const message = {...event, player}\n                const messageDisplayTime = 5000 + (1000 * Math.floor(message.message.length / 100))\n                this.state.players = { ...this.state.players, [event.playerId]: Player.addMessage(player, message)}\n\n                setTimeout(() => {\n                    this.state.players = { ...this.state.players, [event.playerId]: Player.removeOldestMessage(this.state.players[event.playerId])}\n                    this.updatePlayers(Object.values(this.state.players))\n                }, messageDisplayTime)\n\n                this.messages = this.messages.concat(message)\n                this.updateMessagesFunc(this.messages)\n                this.updatePlayers(Object.values(this.state.players))\n                break;\n            default:\n                console.log(\"unrecognized server event: \", event)\n                break;\n        }\n    }\n\n    getPlayersArray() {\n        return Object.keys(this.state.players).map(key => this.state.players[key])\n    }\n\n    /////\n    // Server event handlers\n    ////\n\n    serverKeyDown(event) {\n        this.renderer.startPlayerMovement(event.playerId, Playground.KEY_TO_DIRECTION[event.key])\n    }\n\n    serverKeyUp(event) {\n        this.renderer.stopPlayerMovement(event.playerId, Playground.KEY_TO_DIRECTION[event.key])\n    }\n\n    /////\n    // Local input handlers\n    ////\n\n    localKeyDown(e) {\n        const key = e.key\n\n        if (!Playground.RECOGNIZED_KEYS.includes(key))\n            return\n\n        this.socket.emit(\"event\", { type: \"input_key_down\", playerId: this.player.id, key })\n    }\n\n    localKeyUp(e) {\n        const key = e.key\n\n        if (!Playground.RECOGNIZED_KEYS.includes(key))\n            return\n\n        this.socket.emit(\"event\", { type: \"input_key_up\", playerId: this.player.id, key })\n    }\n\n    localMouseMove(e) {\n        this.socket.emit(\"event\", { type: \"input_mouse_move\", playerId: this.player.id })\n    }\n\n    localClick(e) {\n        this.socket.emit(\"event\", { type: \"input_click\", playerId: this.player.id})\n    }\n\n    sendChatMessage(message) {\n        this.socket.emit(\"event\", {type: \"chat_message\", message, playerId: this.player.id, time: new Date()})\n    }\n}\n\nexport default Playground","import { MD2CharacterComplex } from 'three/examples/jsm/misc/MD2CharacterComplex.js';\n\nconst WEAPONS_ENABLED = true\nconst MD2_SCALE = 4\nconst MD2_CONTROLS = {\n    moveForward: false,\n    moveBackward: false,\n    moveLeft: false,\n    moveRight: false,\n    crouch: false,\n    jump: false,\n    attack: false\n}\n\nclass ModelFactory {\n    static base\n    static skinCount\n    static instanceIndex = 2\n\n    static init() {\n        \n\n        const configOgro = {\n\n            baseUrl: \"models/ogro/\",\n\n            body: \"ogro.md2\",\n            skins: [\"grok.jpg\", \"ogrobase.png\", \"arboshak.png\", \"ctf_r.png\", \"ctf_b.png\", \"darkam.png\", \"freedom.png\",\n                \"gib.png\", \"gordogh.png\", \"igdosh.png\", \"khorne.png\", \"nabogro.png\",\n                \"sharokh.png\"],\n            weapons: [[\"weapon.md2\", \"weapon.jpg\"]],\n            animations: {\n                move: \"run\",\n                idle: \"stand\",\n                jump: \"jump\",\n                attack: \"attack\",\n                crouchMove: \"cwalk\",\n                crouchIdle: \"cstand\",\n                crouchAttach: \"crattack\"\n            },\n\n            walkSpeed: 350,\n            crouchSpeed: 175\n\n        }\n\n        this.skinCount = configOgro.skins.length\n\n        this.base = new MD2CharacterComplex()\n        this.base.scale = MD2_SCALE;\n        this.basePromise = new Promise((resolve, reject) => {\n            this.base.onLoadComplete = () => {\n                this.base.enableShadows(true)\n                this.base.setSkin(2);\n                resolve(this.base)\n            }\n        })\n        this.base.loadParts(configOgro);\n    }\n\n    static async getModelInstance(skin = this.instanceIndex) {\n        this.instanceIndex = (this.instanceIndex + 1) % this.skinCount\n\n        const instance = new MD2CharacterComplex()\n        instance.scale = MD2_SCALE\n        instance.controls = this.getControlsCopy()\n        instance.id = Math.random()\n\n        return await this.basePromise.then(base => {\n            instance.shareParts(base)\n            instance.enableShadows(true);\n            instance.setSkin(skin)\n\n            if (WEAPONS_ENABLED)\n                instance.setWeapon(0)\n\n            return instance\n        })\n    }\n\n    static getControlsCopy() {\n        const controls = {}\n        Object.keys(MD2_CONTROLS).forEach(key => controls[key] = MD2_CONTROLS[key])\n        return controls\n    }\n}\n\nModelFactory.init()\n\nexport default ModelFactory","import React, { useEffect, useState } from 'react'\nimport { useFrame, Dom } from 'react-three-fiber'\nimport ModelFactory from '../ModelFactory'\nimport Util from '../Util'\nimport './PlayerView.css'\n\nfunction PlayerView({ player, messages }) {\n    const [md2, setMd2] = useState(null)\n    const [height, setHeight] = useState(0)\n\n    useEffect(() => {\n        ModelFactory.getModelInstance().then(instance => {\n            const bbox = Util.computeCompositeBoundingBox(instance.root)\n\n            setHeight(bbox.getSize().y)\n            setMd2(instance)\n        })\n    }, [])\n\n    useFrame(info => {\n        if (md2) {\n            md2.root.position.set(player.position.x, md2.root.position.y, player.position.z)\n            md2.update(.012)\n        }\n    })\n\n    return (\n        <mesh>\n            {md2 && \n                <>\n                    <primitive object={md2.root} />\n                    <Dom center position={[player.position.x, player.position.y, player.position.z]}>\n                        <div className=\"scene-label\">{player.name}</div>\n                    </Dom>\n\n                    {messages.map((message, i) => (\n                        <Dom key={message.time} center position={[player.position.x, player.position.y + height*1.25, player.position.z]}>\n                            <div style={{transform: `translateY(${-i*2.1}rem)`}} className=\"speech-bubble\">{message.message}</div>\n                        </Dom>\n                    ))}\n                </>\n            }\n        </mesh>\n    )\n}\n\nexport default PlayerView","import React, {useState} from 'react'\nimport './ChatWindow.css'\nimport {InputGroup} from '@blueprintjs/core'\n\nfunction ChatWindow({sendChatMessage, messages}) {\n    const [inputText, setInputText] = useState(\"\")\n\n    const sendMessage = e => {\n        if (e.which === 13) { //check for 'enter' press\n            sendChatMessage(inputText)\n            setInputText(\"\")\n        }\n    }\n\n    return (\n        <div className=\"ChatWindow\">\n            <div className=\"all-messages\">\n                {messages.map(message => (\n                    <div className=\"chat-message\" key={message.time}>\n                        <div className=\"chat-message-name\">{message.player.name}:</div>\n                        <div className=\"chat-message-content\">{message.message}</div>\n                    </div>\n                ))}\n            </div>\n            <InputGroup\n                className=\"your-message\"\n                placeholder=\"your message...\"\n                large\n                onKeyDown={sendMessage}\n                value={inputText}\n                onChange={event => setInputText(event.target.value)}\n            />\n        </div>\n    )\n}\n\nexport default ChatWindow","import React, {useMemo, useEffect, useState, useRef} from 'react'\nimport * as THREE from 'three'\nimport Stats from 'three/examples/jsm/libs/stats.module.js'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport { Canvas, extend, useThree, useFrame } from 'react-three-fiber'\nimport Playground from './Playground'\nimport PlayerView from './components/PlayerView'\nimport ChatWindow from './components/ChatWindow'\n// import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\n// import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\n// import { SSAOPass } from 'three/examples/jsm/postprocessing/SSAOPass'\nimport './MainCanvas.css'\n\n// extend({ EffectComposer, RenderPass, SSAOPass })\nextend({ OrbitControls })\n\nconst stats = new Stats()\n\nconst CameraController = () => {\n    const { camera, gl } = useThree();\n    useFrame(() => stats.update())\n    useEffect(\n        () => {\n            gl.domElement.appendChild(stats.dom)\n            const controls = new OrbitControls(camera, gl.domElement);\n            controls.target.set(0, 50, 0)\n            return () => {\n                controls.dispose();\n            };\n        },\n        [camera, gl]\n    );\n    return null;\n}\n\n// function Effects() {\n//     const { gl, scene, camera, size } = useThree()\n//     const composer = useRef()\n//     useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n//     useFrame(() => composer.current.render(), 1)\n//     return (\n//         <effectComposer ref={composer} args={[gl]}>\n//             <renderPass attachArray=\"passes\" args={[scene, camera]} />\n//             <sSAOPass attachArray=\"passes\" args={[scene, camera, size.width, size.height]}/>\n//         </effectComposer>\n//     )\n// }\n\nfunction MainCanvas({player}) {\n    const [players, setPlayers] = useState([])\n    const [messages, setMessages] = useState([])\n    const [playground, setPlayground] = useState(null)\n    const grassTexture = useMemo(() => new THREE.TextureLoader().load(\"grasslight-big.jpg\"), [])\n\n    useEffect(() => {\n        setPlayground(new Playground(player, players => setPlayers(players), messages => setMessages(messages)))\n    }, [player])\n\n    return (\n        <div className=\"main-canvas-container\">\n            <Canvas\n                style={{ backgroundColor: \"#123\" }}\n                gl={{ antialias: false, alpha: true }}\n                pixelRatio={window.devicePixelRatio}\n                camera={{ position: [0, 150, 1300], near: 1, far: 4000 }}\n                shadowMap\n                onCreated={({ gl }) => {\n                    gl.toneMapping = THREE.ReinhardToneMapping\n                    gl.outputEncoding = THREE.sRGBEncoding\n                    gl.shadowMap.type = THREE.PCFSoftShadowMap\n                }}\n            >\n                {/* <Effects /> */}\n                <CameraController />\n                <fog attach=\"fog\" args={[0x112233, 1000, 4000]} />\n                <ambientLight args={[0x888888]} />\n                <directionalLight\n                    args={[0xffffff, 8]}\n                    position={[250, 450, 500]}\n                    shadow-camera-left={-1000}\n                    shadow-camera-bottom={-1000}\n                    shadow-camera-right={1000}\n                    shadow-camera-top={1000}\n                    shadow-camera-near={1}\n                    shadow-camera-far={1200}\n                    shadow-mapSize-width={1024}\n                    shadow-mapSize-height={1024}\n                    castShadow\n                />\n\n                {players.map(player => <PlayerView key={player.id} player={player} messages={player.visibleMessages} />)}\n\n                <mesh receiveShadow rotation-x={- Math.PI / 2}>\n                    <planeBufferGeometry attach=\"geometry\" args={[16000, 16000]} />\n                    <meshLambertMaterial attach=\"material\" color={0x445566}>\n                        <primitive attach=\"map\" object={grassTexture} repeat={[64, 64]} wrapS={THREE.RepeatWrapping} wrapT={THREE.RepeatWrapping} encoding={THREE.sRGBEncoding} />\n                    </meshLambertMaterial>\n                </mesh>\n            </Canvas>\n            {playground && \n                <ChatWindow sendChatMessage={playground.sendChatMessage.bind(playground)} messages={messages} />\n            }\n        </div>\n    )\n}\n\nexport default MainCanvas","import React, {useState} from 'react';\nimport './LoginPrompt.css'\nimport {FormGroup, InputGroup, Button} from '@blueprintjs/core'\nimport Player from '../Player'\n\nfunction LoginPrompt({logIn}) {\n    const [name, setName] = useState(\"\")\n\n    const handleTextChange = e => {\n        const text = e.target.value || \"\"\n        setName(text)\n    }\n\n    const handleKeyPress = e => e.which === 13 ? logIn(Player.create(name)) : \"\"\n\n    return (\n        <div className=\"login-container bp3-light\">\n            <FormGroup\n                label=\"Choose a name to use:\"\n            >\n                <InputGroup autoFocus placeholder=\"name...\" large onChange={handleTextChange} onKeyDown={handleKeyPress}/>\n            </FormGroup>\n\n            <Button onClick={() => {\n                logIn(Player.create(name))\n            }}>Join</Button>\n        </div>\n    )\n}\n\nexport default LoginPrompt","import React, {useState, useEffect} from 'react';\nimport MainCanvas from './MainCanvas'\nimport LoginPrompt from './components/LoginPrompt'\nimport Player from './Player'\nimport './App.css';\n\nconst QUICK_START = true\n\nfunction App() {\n  const [loggedIn, setLoggedIn] = useState(false)\n  const [player, setPlayer] = useState(null)\n\n  const doLogin = (player) => {\n        setPlayer(player)\n        setLoggedIn(true)\n  }\n\n  useEffect(() => {\n      if (QUICK_START)\n          doLogin(Player.create())\n  }, [])\n\n  return (\n    <div className=\"App bp3-dark\">\n\n        {player &&\n          <MainCanvas player={player}/>\n        }\n\n        <div className=\"screen-container\">\n              {!loggedIn &&\n                  <LoginPrompt logIn={doLogin} />\n              }\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}