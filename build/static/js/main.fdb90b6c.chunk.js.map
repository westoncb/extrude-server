{"version":3,"sources":["MainCanvas.js","Player.js","components/LoginPrompt.js","Playground.js","App.js","serviceWorker.js","index.js"],"names":["MainCanvas","props","console","log","SCREEN_WIDTH","window","innerWidth","SCREEN_HEIGHT","innerHeight","this","clock","THREE","camera","position","set","scene","background","fog","add","light","castShadow","shadow","mapSize","width","height","near","far","left","right","top","bottom","gt","load","gg","gm","color","map","ground","rotation","x","Math","PI","material","repeat","wrapS","wrapT","encoding","receiveShadow","renderer","antialias","setPixelRatio","devicePixelRatio","setSize","outputEncoding","shadowMap","enabled","type","mount","appendChild","domElement","stats","Stats","dom","onclick","e","playground","handleClick","onkeydown","handleKeyDown","onkeyup","handleKeyUp","onmousemove","handleMouseMove","cameraControls","OrbitControls","target","update","addEventListener","aspect","updateProjectionMatrix","animate","requestAnimationFrame","bind","renderThree","getDelta","render","className","ref","React","PureComponent","Player","name","id","round","random","LoginPrompt","logIn","useState","setName","label","placeholder","large","onChange","text","value","onClick","Playground","player","root","Object3D","socket","io","emit","test","on","data","input_type","App","loggedIn","setLoggedIn","setPlayer","setPlayground","doLogin","useEffect","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fdb90b6c.chunk.js","sourcesContent":["import React from 'react'\nimport * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n// import { MD2CharacterComplex } from './jsm/misc/MD2CharacterComplex.js';\n// import { Gyroscope } from './jsm/misc/Gyroscope.js';\n\nimport './MainCanvas.css'\n\n\n// var characters = [];\n// var nCharacters = 0;\n\n// var cameraControls;\n\n// var controls = {\n\n//     moveForward: false,\n//     moveBackward: false,\n//     moveLeft: false,\n//     moveRight: false\n\n// };\n\n// var clock = new THREE.Clock();\n\n\nclass MainCanvas extends React.PureComponent {\n    constructor(props) {\n        super(props)\n\n        console.log('Constructing MainCanvas', props)\n    }\n\n    componentDidMount() {\n        \n\n        var SCREEN_WIDTH = window.innerWidth;\n        var SCREEN_HEIGHT = window.innerHeight;\n\n        this.clock = new THREE.Clock();\n\n        // CAMERA\n        \n        this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 4000);\n        this.camera.position.set(0, 150, 1300);\n\n        // SCENE\n\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0x112233);\n        this.scene.fog = new THREE.Fog(0x112233, 1000, 4000);\n\n        this.scene.add(this.camera);\n\n        // LIGHTS\n\n        this.scene.add(new THREE.AmbientLight(0x222222));\n\n        var light = new THREE.DirectionalLight(0xffffff, 2.25);\n        light.position.set(200, 450, 500);\n        light.castShadow = true;\n        light.shadow.mapSize.width = 1024;\n        light.shadow.mapSize.height = 512;\n        light.shadow.camera.near = 100;\n        light.shadow.camera.far = 1200;\n        light.shadow.camera.left = - 1000;\n        light.shadow.camera.right = 1000;\n        light.shadow.camera.top = 350;\n        light.shadow.camera.bottom = - 350;\n\n        this.scene.add(light);\n        // this.scene.add( new CameraHelper( light.shadow.camera ) );\n\n\n        //  GROUND\n\n        var gt = new THREE.TextureLoader().load(\"grasslight-big.jpg\");\n        var gg = new THREE.PlaneBufferGeometry(16000, 16000);\n        var gm = new THREE.MeshPhongMaterial({ color: 0x445566, map: gt });\n\n        var ground = new THREE.Mesh(gg, gm);\n        ground.rotation.x = - Math.PI / 2;\n        ground.material.map.repeat.set(64, 64);\n        ground.material.map.wrapS = THREE.RepeatWrapping;\n        ground.material.map.wrapT = THREE.RepeatWrapping;\n        ground.material.map.encoding = THREE.sRGBEncoding;\n        ground.receiveShadow = true;\n\n        this.scene.add(ground);\n\n        // RENDERER\n\n        this.renderer = new THREE.WebGLRenderer({ antialias: false });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n        // container.appendChild(this.renderer.domElement);\n        \n\n        //\n\n        this.renderer.outputEncoding = THREE.sRGBEncoding;\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n        this.mount.appendChild(this.renderer.domElement);\n\n        // STATS\n        this.stats = new Stats();\n        this.mount.appendChild(this.stats.dom);\n        \n        // EVENTS\n        this.mount.onclick = e => {\n            if (this.props.playground)\n                this.props.playground.handleClick(e)\n        }\n        this.mount.onkeydown = e => {\n            if (this.props.playground)\n                this.props.playground.handleKeyDown(e)\n        }\n        this.mount.onkeyup = e => {\n            if (this.props.playground)\n                this.props.playground.handleKeyUp(e)\n        }\n        this.mount.onmousemove = e => {\n            if (this.props.playground)\n                this.props.playground.handleMouseMove(e)\n        }\n\n        // CONTROLS\n        this.cameraControls = new OrbitControls(this.camera, this.renderer.domElement);\n        this.cameraControls.target.set(0, 50, 0);\n        this.cameraControls.update();\n\n        window.addEventListener('resize', () => {\n            SCREEN_WIDTH = window.innerWidth;\n            SCREEN_HEIGHT = window.innerHeight;\n\n            this.renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n\n            this.camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;\n            this.camera.updateProjectionMatrix();\n        }, false);\n\n        this.animate()\n    }\n\n    animate() {\n\n        requestAnimationFrame(this.animate.bind(this));\n        this.renderThree();\n\n        this.stats.update();\n\n    }\n\n    renderThree() {\n\n        var delta = this.clock.getDelta();\n\n        // for (var i = 0; i < nCharacters; i++) {\n\n        //     characters[i].update(delta);\n\n        // }\n\n        this.renderer.render(this.scene, this.camera);\n\n    }\n\n    render() {\n        return (\n            <div className=\"main-canvas-container\" ref={ref => (this.mount = ref)} />\n        )\n    }\n}\n\nexport default MainCanvas","class Player {\n    id\n    name\n\n    constructor(name) {\n        this.id = Math.round(Math.random() * 1e10)\n        this.name = name\n    }\n}\n\nexport default Player","import React, {useState} from 'react';\nimport './LoginPrompt.css'\nimport {FormGroup, InputGroup, Button} from '@blueprintjs/core'\nimport Player from '../Player'\n\nfunction LoginPrompt({logIn}) {\n    const [name, setName] = useState(\"\")\n\n    const handleTextChange = e => {\n        const text = e.target.value || \"\"\n        setName(text)\n    }\n\n    return (\n        <div className=\"login-container bp3-light\">\n            <FormGroup\n                label=\"Choose a name to use:\"\n            >\n                <InputGroup placeholder=\"name...\" large onChange={handleTextChange}/>\n            </FormGroup>\n\n            <Button onClick={() => {\n                logIn(new Player(name))\n            }}>Join</Button>\n        </div>\n    )\n}\n\nexport default LoginPrompt","import {Object3D} from 'three'\nimport io from \"socket.io-client\"\n\nclass Playground {\n    root = new Object3D()\n    player = null\n    socket = null\n\n    constructor(player) {\n        this.player = player\n\n        this.socket = io(\"http://localhost:3000\")\n        this.socket.emit(\"player_input\", {test: \"testlblah\"})\n\n        this.socket.on(\"player_input_relay\", data => {\n            console.log(\"player_input_relay\", data)\n\n            switch (data.input_type) {\n                case \"key_down\":\n                    \n                    break;\n                case \"key_up\":\n\n                    break;\n                case \"mouse_move\":\n\n                    break;\n                case \"click\":\n\n                    break;\n                default:\n                    break;\n            }\n        })\n    }\n\n    handleKeyDown(e) {\n        this.socket.emit(\"player_input\", { input_type: \"key_down\" })\n    }\n\n    handleKeyUp(e) {\n        this.socket.emit(\"player_input\", { input_type: \"key_up\" })\n    }\n\n    handleMouseMove(e) {\n        this.socket.emit(\"player_input\", { input_type: \"mouse_move\" })\n    }\n\n    handleClick(e) {\n        this.socket.emit(\"player_input\", {input_type: \"click\"})\n    }\n}\n\nexport default Playground","import React, {useState, useEffect} from 'react';\nimport MainCanvas from './MainCanvas'\nimport LoginPrompt from './components/LoginPrompt'\nimport Playground from './Playground'\nimport Player from './Player'\nimport './App.css';\n\nconst QUICK_START = true\n\nfunction App() {\n  const [loggedIn, setLoggedIn] = useState(false)\n  const [player, setPlayer] = useState(null)\n  const [playground, setPlayground] = useState(null)\n\n  const doLogin = (player) => {\n        setPlayer(player)\n        setPlayground(new Playground(player))\n        setLoggedIn(true)\n  }\n\n  useEffect(() => {\n      if (QUICK_START)\n          doLogin(new Player(\"weston\"))\n  }, [])\n\n  return (\n    <div className=\"App bp3-dark\">\n\n        <MainCanvas playground={playground}/>\n\n        <div className=\"overlay\">\n              {!loggedIn &&\n                  <LoginPrompt logIn={doLogin} />\n              }\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}