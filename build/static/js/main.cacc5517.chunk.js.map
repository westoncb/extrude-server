{"version":3,"sources":["PGRenderer.js","Playground.js","Player.js","MainCanvas.js","components/LoginPrompt.js","App.js","serviceWorker.js","index.js"],"names":["PGRenderer","root","Object3D","playerId","direction","Playground","setPlayers","player","socket","renderer","allPlayers","this","id","name","console","log","connectToServer","io","emit","type","on","data","handleServerEvent","event","concat","serverKeyDown","serverKeyUp","startPlayerMovement","KEY_TO_DIRECTION","key","stopPlayerMovement","e","RECOGNIZED_KEYS","includes","a","w","s","d","Player","model","useMemo","character","MD2CharacterComplex","scale","loadParts","baseUrl","body","skins","weapons","animations","move","idle","jump","attack","crouchMove","crouchIdle","crouchAttach","walkSpeed","crouchSpeed","position","set","Math","random","object","extend","OrbitControls","SCREEN_WIDTH","window","innerWidth","SCREEN_HEIGHT","innerHeight","stats","Stats","CameraController","useThree","camera","gl","useUpdate","update","useEffect","domElement","appendChild","dom","controls","target","dispose","MainCanvas","useState","players","grassTexture","THREE","load","playground","thePlayers","style","backgroundColor","antialias","alpha","pixelRatio","devicePixelRatio","near","far","size","attach","args","shadow-camera-left","shadow-camera-bottom","shadow-camera-right","shadow-camera-top","shadow-camera-near","shadow-camera-far","shadow-mapSize-width","shadow-mapSize-height","castShadow","map","receiveShadow","rotation-x","PI","color","repeat","wrapS","wrapT","encoding","LoginPrompt","logIn","setName","className","label","placeholder","large","onChange","text","value","onClick","App","loggedIn","setLoggedIn","setPlayer","doLogin","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cacc5517.chunk.js","sourcesContent":["import Playground from './Playground'\nimport { Object3D } from 'three'\n\nclass PGRenderer {\n    root = new Object3D\n\n    startPlayerMovement(playerId, direction) {\n\n    }\n\n    stopPlayerMovement(playerId, direction) {\n\n    }\n}\n\nexport default PGRenderer","import io from \"socket.io-client\"\nimport PGRenderer from './PGRenderer'\n\nconst isProduction = process.env.NODE_ENV !== 'development'\nconst port = 3000\nconst devURL = \"localhost:\" + port\nconst prodURL = \"https://nameless-depths-23573.herokuapp.com\"\nconst serverURL = isProduction ? prodURL : devURL\n\nclass Playground {\n    player = null\n    socket = null\n    renderer = new PGRenderer()\n    allPlayers = []\n\n    static RECOGNIZED_KEYS = [\"a\", \"w\", \"s\", \"d\"]\n    static KEY_TO_DIRECTION = { a: 'left', w: \"up\", s: \"down\", d: \"right\"}\n\n    constructor(setPlayers) {\n        this.player = {id: 1, name: \"weston\"}\n        this.setPlayers = setPlayers\n\n        console.log(\"CONSTRUCT!!!\")\n\n        this.connectToServer(this.player)    \n    }\n\n    connectToServer(player) {\n        this.socket = io(serverURL)\n        this.socket.emit(\"event\", { type: \"player_enter_request\", player })\n\n        this.socket.on(\"event\", data => {\n            console.log(\"server event: \", data)\n\n            this.handleServerEvent(data)\n        })\n    }\n\n    handleServerEvent(event) {\n        switch (event.type) {\n            case \"player_enter\":\n                console.log(\"player_enter: \", event.player)\n                this.allPlayers = this.allPlayers.concat(event.player)\n\n                console.log(\"test\", this.setPlayers, this.allPlayers)\n                if (this.setPlayers) {\n                    this.setPlayers(this.allPlayers)\n                }\n                break;\n            case \"player_exit\":\n                \n                break;\n            case \"input_key_down\":\n                this.serverKeyDown(event)\n                break;\n            case \"input_key_up\":\n                this.serverKeyUp(event)\n                break;\n            case \"input_mouse_move\":\n\n                break;\n            case \"input_click\":\n\n                break;\n            default:\n                console.log(\"unrecognized server event: \", event)\n                break;\n        }\n    }\n\n    /////\n    // Server event handlers\n    ////\n\n    serverKeyDown(event) {\n        this.renderer.startPlayerMovement(event.playerId, Playground.KEY_TO_DIRECTION[event.key])\n    }\n\n    serverKeyUp(event) {\n        this.renderer.stopPlayerMovement(event.playerId, Playground.KEY_TO_DIRECTION[event.key])\n    }\n\n    /////\n    // Local input handlers\n    ////\n\n    localKeyDown(e) {\n        const key = e.key\n\n        if (!Playground.RECOGNIZED_KEYS.includes(key))\n            return\n\n        this.socket.emit(\"event\", { type: \"input_key_down\", playerId: this.player.id, key })\n    }\n\n    localKeyUp(e) {\n        const key = e.key\n\n        if (!Playground.RECOGNIZED_KEYS.includes(key))\n            return\n\n        this.socket.emit(\"event\", { type: \"input_key_up\", playerId: this.player.id, key })\n    }\n\n    localMouseMove(e) {\n        this.socket.emit(\"event\", { type: \"input_mouse_move\", playerId: this.player.id })\n    }\n\n    localClick(e) {\n        this.socket.emit(\"event\", { type: \"input_click\", playerId: this.player.id})\n    }\n}\n\nexport default Playground","import React, {useMemo} from 'react'\nimport { MD2CharacterComplex } from 'three/examples/jsm/misc/MD2CharacterComplex.js';\nimport {Vector3} from 'three'\n\nfunction Player({id, name}) {\n\n    const model = useMemo(() => {\n        const configOgro = {\n\n            baseUrl: \"models/ogro/\",\n\n            body: \"ogro.md2\",\n            skins: [\"grok.jpg\", \"ogrobase.png\", \"arboshak.png\", \"ctf_r.png\", \"ctf_b.png\", \"darkam.png\", \"freedom.png\",\n                \"gib.png\", \"gordogh.png\", \"igdosh.png\", \"khorne.png\", \"nabogro.png\",\n                \"sharokh.png\"],\n            weapons: [[\"weapon.md2\", \"weapon.jpg\"]],\n            animations: {\n                move: \"run\",\n                idle: \"stand\",\n                jump: \"jump\",\n                attack: \"attack\",\n                crouchMove: \"cwalk\",\n                crouchIdle: \"cstand\",\n                crouchAttach: \"crattack\"\n            },\n\n            walkSpeed: 350,\n            crouchSpeed: 175\n\n        };\n\n        const character = new MD2CharacterComplex()\n        character.scale = 3;\n        character.loadParts(configOgro);\n        character.root.position.set(Math.random() * 100, 0, Math.random() * 100)\n\n        return character.root\n    }, [])\n\n    return (\n        <mesh>\n            <primitive object={model} position={[0, 0, 0]} />\n        </mesh>\n    )\n}\n\nexport default Player","import React, {useMemo, useEffect, useState} from 'react'\nimport * as THREE from 'three'\nimport Stats from 'three/examples/jsm/libs/stats.module.js'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport { Canvas, extend, useThree, useUpdate } from 'react-three-fiber'\nimport Playground from './Playground'\nimport Player from './Player'\n\nimport './MainCanvas.css'\n\nextend({ OrbitControls })\n\n// var characters = [];\n// var nCharacters = 0;\n\n// var cameraControls;\n\n// var controls = {\n\n//     moveForward: false,\n//     moveBackward: false,\n//     moveLeft: false,\n//     moveRight: false\n\n// };\n\nconst SCREEN_WIDTH = window.innerWidth;\nconst SCREEN_HEIGHT = window.innerHeight;\nconst stats = new Stats()\n\nconst CameraController = () => {\n    const { camera, gl } = useThree();\n    useUpdate(() => stats.update())\n    useEffect(\n        () => {\n            gl.domElement.appendChild(stats.dom)\n            const controls = new OrbitControls(camera, gl.domElement);\n            controls.target.set(0, 50, 0)\n            return () => {\n                controls.dispose();\n            };\n        },\n        [camera, gl]\n    );\n    return null;\n}\n\nfunction MainCanvas() {\n\n    const [players, setPlayers] = useState([])\n    const grassTexture = useMemo(() => new THREE.TextureLoader().load(\"grasslight-big.jpg\"), [])\n\n    const playground = useMemo(() => new Playground(thePlayers => setPlayers(thePlayers)), [])\n\n    return (\n        <Canvas style={{backgroundColor: \"#123\"}} gl={{ antialias: false, alpha: true }} pixelRatio={window.devicePixelRatio} camera={{ position: [0, 150, 1300], near: 1, far: 4000}} size={[SCREEN_WIDTH, SCREEN_HEIGHT]} >\n            <CameraController/>\n            <fog attach=\"fog\" args={[0x112233, 1000, 4000]} />\n            <ambientLight args={[0x222222]} />\n            <directionalLight\n                args={[0xffffff, 2.25]}\n                position={THREE.Vector3(200, 450, 500)}\n                shadow-camera-left={-1000}\n                shadow-camera-bottom={-350}\n                shadow-camera-right={1000}\n                shadow-camera-top={350}\n                shadow-camera-near={100}\n                shadow-camera-far={1200}\n                shadow-mapSize-width={1024}\n                shadow-mapSize-height={512}\n                castShadow\n            />\n            {playground && \n                players.map(player => <Player key={player.id} id={player.id} name={player.name} />)\n            }\n            <mesh receiveShadow rotation-x={- Math.PI / 2}>\n                <planeBufferGeometry attach=\"geometry\" args={[16000, 16000]} />\n                <meshLambertMaterial attach=\"material\" color={0x445566}>\n                    <primitive attach=\"map\" object={grassTexture} repeat={[64, 64]} wrapS={THREE.RepeatWrapping} wrapT={THREE.RepeatWrapping} encoding={THREE.sRGBEncoding} />\n                </meshLambertMaterial>\n            </mesh>\n        </Canvas>\n    )\n}\n\nexport default MainCanvas","import React, {useState} from 'react';\nimport './LoginPrompt.css'\nimport {FormGroup, InputGroup, Button} from '@blueprintjs/core'\nimport Player from '../Player'\n\nfunction LoginPrompt({logIn}) {\n    const [name, setName] = useState(\"\")\n\n    const handleTextChange = e => {\n        const text = e.target.value || \"\"\n        setName(text)\n    }\n\n    return (\n        <div className=\"login-container bp3-light\">\n            <FormGroup\n                label=\"Choose a name to use:\"\n            >\n                <InputGroup placeholder=\"name...\" large onChange={handleTextChange}/>\n            </FormGroup>\n\n            <Button onClick={() => {\n                logIn()\n            }}>Join</Button>\n        </div>\n    )\n}\n\nexport default LoginPrompt","import React, {useState, useEffect} from 'react';\nimport MainCanvas from './MainCanvas'\nimport LoginPrompt from './components/LoginPrompt'\nimport Playground from './Playground'\nimport Player from './Player'\nimport './App.css';\n\nconst QUICK_START = false\n\nfunction App() {\n  const [loggedIn, setLoggedIn] = useState(false)\n  const [player, setPlayer] = useState(null)\n  const [playground, setPlayground] = useState(null)\n\n  const doLogin = (player) => {\n        setPlayer(player)\n        // setPlayground(new Playground(player))\n        setLoggedIn(true)\n  }\n\n  useEffect(() => {\n      if (QUICK_START)\n          doLogin()\n  }, [])\n\n  return (\n    <div className=\"App bp3-dark\">\n\n        <MainCanvas playground={playground}/>\n\n        <div className=\"overlay\">\n              {!loggedIn &&\n                  <LoginPrompt logIn={doLogin} />\n              }\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}