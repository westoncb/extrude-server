{"version":3,"sources":["Util.js","PlayerData.js","playground.js","constants.js","MeshEvents.js","ModelFactory.js","components/Player.js","components/w-hooks.js","components/TangentGrid.js","global.js","components/PartialStructure.js","components/Structure.js","components/ChatWindow.js","MainCanvas.js","components/LoginPrompt.js","App.js","serviceWorker.js","index.js"],"names":["Util","length","result","characters","charactersLength","i","charAt","Math","floor","random","obj3d","options","allMeshes","walkNodes","node","geometry","excludedTypes","includes","userData","objectType","push","totalBox","Box3","forEach","mesh","updateMatrixWorld","geometryCopy","clone","applyMatrix","matrixWorld","computeBoundingBox","union","boundingBox","func","children","min","max","vector","camera","canvasWidth","canvasHeight","vectorCopy","widthHalf","heightHalf","project","x","y","k","pow","points","l","reduce","center","p","z","Vector3","p1","p2","threshold","sqrt","round","value","det","map","point","Array","isArray","pointsAreEqual2D","concat","abs","undefined","Player","name","randString","rand","id","generateId","position","visibleMessages","keyStates","target","skindex","player","message","slice","shift","initialState","players","structures","messages","RECOGNIZED_KEYS","reducer","state","action","playerId","type","console","assert","tempState","localPlayerId","structure","key","log","handleServerEvent","event","dispatch","socket","emit","messageDisplayTime","setTimeout","usePlayground","useReducer","socketRef","useRef","useEffect","current","localPlayer","removeListener","on","data","initSocketEventHandlers","periodicSyncInterval","setInterval","clearInterval","throttledEmit","useMemo","throttle","execute","actionType","io","time","Date","Error","executeAction","Const","MODE_DEFAULT","MODE_MENU","MODE_EXTRUDE","MODE_MATERIALS","STRUCTURE_MODE_EXTRUDE","MeshEvents","eventsToHandlers","includedMeshes","eventMaps","Object","values","handlerMap","object","MOUSE_MOVE","CLICK","POINTER_OUT","POINTER_OVER","MD2_CONTROLS","moveForward","moveBackward","moveLeft","moveRight","moveUp","moveDown","crouch","jump","attack","ModelFactory","configOgro","baseUrl","body","skins","weapons","animations","move","idle","crouchMove","crouchIdle","crouchAttach","walkSpeed","crouchSpeed","this","skinCount","base","MD2CharacterComplex","scale","basePromise","Promise","resolve","reject","onLoadComplete","enableShadows","setSkin","loadParts","instance","self","updateMovementModel","delta","controls","decceleration","maxSpeed","t","moveDirection","impulseDirection","normalize","forwardVec","applyAxisAngle","bodyOrientation","toTarget","sub","root","rotationGap","cross","copy","speed","exponentialEaseOut","MathUtils","clamp","deltaVec","multiplyScalar","add","rotation","skin","instanceIndex","getControlsCopy","customizeMovement","then","shareParts","setWeapon","keys","init","isLocalPlayer","useState","md2","setMd2","height","setHeight","laser","setLaser","size","useThree","domSelectors","sceneNames","scene","useFrame","domNodes","s","document","querySelector","sceneNodes","nodeName","traverse","dNode","sNode","worldPoint","getWorldPosition","screenPoint","vec3ToScreenPoint","width","style","zIndex","transform","left","top","useDOM","label","createElement","className","innerText","app","getElementsByClassName","appendChild","removeChild","getModelInstance","bbox","computeCompositeBoundingBox","getSize","set","LineGeometry","setPositions","matLine","LineMaterial","color","linewidth","vertexColors","dashed","resolution","Vector2","line","Line2","info","update","pos","THREE","tar","needsUpdate","onClick","e","TangentGrid","orientation","mouse","cellSize","meshRef","laPoint","addScaledVector","lookAt","uniforms","vTarget","planeSize","ref","attach","args","extensions","derivatives","blending","AdditiveBlending","depthTest","depthWrite","transparent","side","DoubleSide","fragmentShader","vertexShader","mousePos","extend","PartialStructure","finishStructureFunc","setPoints","cursorPoint","setCursorPoint","inSnapRange","setInSnapRange","gridConfig","setGridConfig","visible","listenFor","vec","normal","face","applyEuler","vecs","nonBuffer","vertices","verts","attributes","array","sides","sort","b","a","pop","avgSideLength","u","v","dot","target2d","shiftKey","finish","snapDiffVec","owner","extrusionParams","depth","row","theta","bevelThickness","bevelSize","bevelSegments","steps","useUpdate","geom","Float32Array","MAX_POLY_POINTS","modCursorPoint","finalPoints","acc","castShadow","clearcoat","metalness","clearcoatRoughness","roughness","Structure","updateStructure","active","onPointerMove","onPointerOut","mode","setMode","shiftDown","mouseTravel","baseShape","setBaseShape","overMainFace","setOverMainFace","setPosition","centroid","dest","quat","Quaternion","setFromUnitVectors","rotatedPoints","applyQuaternion","Shape","handleMeshMouseMove","hoverFaceIndex","showHighlightedMaterial","highlightExtrusionSurface","quaternion","rotationFromNormal","receiveShadow","emissive","emissiveIntensity","emmissive","getIndicatorPosition","ChatWindow","sendChatMessage","hideChat","inputText","setInputText","allMessagesRef","scrollTop","scrollHeight","placeholder","large","onKeyDown","which","stopPropagation","onChange","autoFocus","EffectComposer","RenderPass","UnrealBloomPass","SSAOPass","stats","Stats","camDest","camLookAtDest","lastLookAtVec","camZoom","CameraController","positionObj","targetObj","shiftedPosition","extension","sign","lerp","newLookAt","updateProjectionMatrix","Effects","ssao","bloom","gl","composer","setSize","render","attachArray","bloomThreshold","bloomStrength","bloomRadius","kernelRadius","minDistance","maxDistance","InputHandler","chatVisible","setChatVisible","setT","setShiftDown","activeObjectId","setActiveObjectId","setMouseTravel","domElement","onclick","window","onkeydown","preventDefault","onkeyup","onmousemove","clientX","clientY","movementX","movementY","onwheel","deltaY","activeStructure","newDepth","updatedStructure","MainCanvas","playerInfo","grassTexture","load","eventOccurred","handleMeshClick","handleMeshPointerOut","handleMeshPointerOver","backgroundColor","antialias","alpha","pixelRatio","devicePixelRatio","near","far","shadowMap","onCreated","toneMapping","outputEncoding","setClearColor","shadow-camera-left","shadow-camera-bottom","shadow-camera-right","shadow-camera-top","shadow-camera-near","shadow-camera-far","shadow-mapSize-width","shadow-mapSize-height","onPointerOver","rotation-x","PI","repeat","wrapS","wrapT","encoding","LoginPrompt","logIn","setName","text","create","App","loggedIn","setLoggedIn","setPlayer","doLogin","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c140147a.chunk.js","sourcesContent":["import {Box3, Vector3} from 'three'\n\nclass Util {\n    static randString(length) {\n        var result = ''\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n        var charactersLength = characters.length\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() * charactersLength))\n        }\n        return result\n    }\n\n    /*\n        Computes a bounding box which is the union of the geometry\n        belonging to the passed in node and all descendent meshes.\n        This exists because the Three.Box3().setFromObject() method\n        is broken—possibly having to do with THREE.Group nodes.\n    */\n    static computeCompositeBoundingBox(obj3d, options = {}) {\n        const allMeshes = [];\n\n        Util.walkNodes(obj3d, node => {\n            if (node.geometry) {\n                const notExcluded =\n                    !options.excludedTypes ||\n                    !options.excludedTypes.includes(node.userData.objectType);\n\n                if (notExcluded) allMeshes.push(node);\n            }\n        });\n\n        let totalBox = new Box3();\n        allMeshes.forEach(mesh => {\n            mesh.updateMatrixWorld();\n            const geometryCopy = mesh.geometry.clone();\n            geometryCopy.applyMatrix(mesh.matrixWorld);\n            geometryCopy.computeBoundingBox();\n            totalBox = totalBox.union(geometryCopy.boundingBox);\n        });\n\n        return totalBox;\n    }\n\n    /*\n        Depth first walk of a three.js node and all of its children.\n        The passed in function is called at each node, and the current\n        node is passed in as the sole argument.\n    */\n    static walkNodes(node, func) {\n        func(node);\n\n        for (let i = 0; i < node.children.length; i += 1) {\n            Util.walkNodes(node.children[i], func);\n        }\n    }\n\n    static rand(min, max) {\n        return Math.random() * (max - min) + min\n    }\n\n    static vec3ToScreenPoint(vector, camera, canvasWidth, canvasHeight) {\n        // Make a copy since .project(...) will transform the vector\n        const vectorCopy = vector.clone();\n\n        const widthHalf = 0.5 * canvasWidth;\n        const heightHalf = 0.5 * canvasHeight;\n\n        vectorCopy.project(camera);\n\n        vectorCopy.x = vectorCopy.x * widthHalf + widthHalf;\n        vectorCopy.y = -(vectorCopy.y * heightHalf) + heightHalf;\n\n        return {\n            x: vectorCopy.x,\n            y: vectorCopy.y,\n        };\n    }\n\n    static exponentialEaseOut(k) {\n        return k === 1 ? 1 : - Math.pow(2, - 10 * k) + 1;\n    }\n\n    /*\n    From: https://github.com/ayamflow/polygon-centroid\n  */\n    static centroid(points) {\n        const l = points.length;\n\n        return points.reduce((center, p, i) => {\n            center.x += p.x;\n            center.y += p.y;\n            center.z += p.z;\n\n            if (i === l - 1) {\n                center.x /= l;\n                center.y /= l;\n                center.z /= l;\n            }\n\n            return center;\n        }, new Vector3(0, 0, 0));\n    }\n\n    static pointsAreEqual3D(p1, p2, threshold = 0.001) {\n        return (\n            Math.sqrt((p2.x - p1.x) ** 2 + (p2.y - p1.y) ** 2 + (p2.z - p1.z) ** 2) <\n            threshold\n        );\n    }\n\n    static generateId() {\n        return \"\" + Math.round(Math.random() * 1000000)\n    }\n\n    static step(min, max, value) {\n        if (value <= min)\n            return 0;\n        if (value >= max)\n            return 1;\n    }\n\n    static smoothstep(min, max, value) {\n        const x = Math.max(0, Math.min(1, (value - min) / (max - min)));\n        return x * x * (3 - 2 * x);\n    }\n\n    /*\n    From: https://github.com/math-utils/area-polygon\n  */\n    static polygonArea(points) {\n        let det = 0;\n\n        points = points.map(point => {\n            if (!Array.isArray(point)) return point;\n            return {\n                x: point[0],\n                y: point[1],\n            };\n        });\n\n        if (!Util.pointsAreEqual2D(points[0], points[points.length - 1]))\n            points = points.concat(points[0]);\n\n        for (let i = 0; i < points.length - 1; i += 1)\n            det += points[i].x * points[i + 1].y - points[i].y * points[i + 1].x;\n\n        return Math.abs(det) / 2;\n    }\n\n    // Works for points in object or array format\n    static pointsAreEqual2D(p1, p2, threshold = 0.001) {\n        // object style\n        if (p1.x !== undefined) {\n            return Math.sqrt((p2.x - p1.x) ** 2 + (p2.y - p1.y) ** 2) < threshold;\n        }\n\n        // array style\n        return Math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2) < threshold;\n    }\n}\n\nexport default Util","import  {Vector3} from \"three\"\nimport Util from './Util'\n\nconst player_skin_count = 13\n\nclass Player {\n\n    static create(name = Util.randString(Util.rand(3, 12))) {\n        return  {\n                    name,\n                    id: Util.generateId(),\n                    position: new Vector3(Util.rand(-100, 100), 0, Util.rand(-100, 100)),\n                    visibleMessages: [],\n                    keyStates: {},\n                    target: new Vector3(),\n                    skindex: (name.length * 5003) % player_skin_count\n                }\n    }\n\n    static addMessage(player, message) {\n        const newPlayer = {...player, visibleMessages: [...player.visibleMessages, message]}\n        return newPlayer\n    }\n\n    static removeOldestMessage(player) {\n        const visibleMessages = player.visibleMessages.slice()\n        visibleMessages.shift()\n        return {...player, visibleMessages}\n    }\n}\n\nexport default Player","import io from \"socket.io-client\"\nimport Player from './PlayerData'\nimport {throttle} from 'lodash-es'\nimport { useRef, useEffect, useReducer, useMemo } from \"react\"\n\nconst isProduction = process.env.NODE_ENV !== 'development'\nconst port = 3000\nconst devURL = \"localhost:\" + port\nconst prodURL = \"https://nameless-depths-23573.herokuapp.com\"\nconst serverURL = isProduction ? prodURL : devURL\nconst PERIODIC_SYNC_TIME = 2000\nconst TARGET_UPDATE_THROTTLE = 1000\n\nconst initialState = {players: {}, structures: {}, messages: []}\nconst RECOGNIZED_KEYS = [\"a\", \"w\", \"s\", \"d\", \"f\", \"e\", \"q\", \" \", \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"]\n\nfunction reducer(state, action) {\n    let playerId = action.playerId || (action.player ? action.player.id : undefined)\n    let player = playerId ? state.players[playerId] : undefined\n    \n\n    switch (action.type) {\n        case \"update_player\":\n            console.assert(playerId !== undefined, \"Undefined playerId; required for:\", action)\n            return {...state, players: {...state.players, [playerId]: action.player}}\n        case \"remove_player\":\n            console.assert(playerId !== undefined, \"Undefined playerId; required for:\", action)\n            const tempState = { ...state }\n            delete tempState.players[playerId]\n            return tempState\n        case \"update_local_player\":\n            console.assert(playerId !== undefined, \"Undefined playerId; required for:\", action)\n            return { ...state, localPlayerId: playerId, players: { ...state.players, [playerId]: action.player } }\n        case \"update_structure\":\n            return { ...state, structures: { ...state.structures, [action.structure.id]: action.structure } }\n        case \"replace_state\":\n            return action.state\n        case \"update_player_key_state\":\n            console.assert(playerId !== undefined, \"Undefined playerId; required for:\", action)\n            return { ...state, players: { ...state.players, [playerId]: { ...player, keyStates: { ...player.keyStates, [action.key]: action.state}}}}\n        case \"add_player_message\":\n            console.assert(playerId !== undefined, \"Undefined playerId; required for:\", action)\n            return { ...state, messages: [...state.messages, action.message], players: { ...state.players, [playerId]: { ...player, visibleMessages: [...player.visibleMessages, action.message] } } }\n        case \"remove_oldest_player_message\":\n            console.assert(playerId !== undefined, \"Undefined playerId; required for:\", action)\n            if (player) {\n                const visibleMessages = player.visibleMessages.slice()\n                visibleMessages.shift()\n                return { ...state, players: { ...state.players, [playerId]: { ...player, visibleMessages } } }\n            } else {\n                return state\n            }\n        case \"update_player_target\":\n            console.assert(playerId !== undefined, \"Undefined playerId; required for:\", action)\n            return { ...state, players: { ...state.players, [playerId]: { ...player, target: action.target} } }\n        default:\n            console.log(\"unrecognized action: \", action)\n            return state\n    }\n}\n\nfunction usePlayground() {\n    const [state, dispatch] = useReducer(reducer, initialState)\n    const socketRef = useRef()\n\n    useEffect(() => {\n        if (socketRef.current) {\n            const socket = socketRef.current\n            const localPlayer = state.players[state.localPlayerId]\n\n            initSocketEventHandlers(socket, state, dispatch)\n\n            const periodicSyncInterval = setInterval(() => {\n                socketRef.current.emit(\"event\", { type: \"update_player\", player: localPlayer })\n            }, PERIODIC_SYNC_TIME)\n\n            return () => {\n                clearInterval(periodicSyncInterval)\n            }\n        }\n    }, [state])\n\n    const throttledEmit = useMemo(() => {\n        return throttle(data => socketRef.current.emit(\"event\", data, TARGET_UPDATE_THROTTLE))\n    }, [])\n\n    const execute = useMemo(() => {\n        return (actionType, data) => {\n            executeAction({type: actionType, ...data}, socketRef, state, dispatch, throttledEmit)\n        }\n    }, [dispatch, state, throttledEmit])\n\n    return {\n        execute,\n        state\n    }\n}\n\nfunction initSocketEventHandlers(socket, state, dispatch) {\n    const localPlayerId = state.localPlayerId\n    const localPlayer = localPlayerId ? state.players[localPlayerId] : undefined\n\n    socket.removeListener(\"event\")\n    socket.removeListener(\"disconnect\")\n    socket.removeListener(\"reconnect\")\n\n    socket.on(\"event\", data => {\n        handleServerEvent(data, state, dispatch, socket)\n    })\n\n    socket.on(\"disconnect\", data => {\n        // This is a hack: it's not a server event, but we\n        // want to use the same logic for now\n        handleServerEvent({ type: \"player_exit\", localPlayer })\n    })\n\n    socket.on(\"reconnect\", data => {\n        socket.emit(\"event\", { type: \"player_enter_request\", localPlayer })\n    })\n}\n\nfunction executeAction(action, socketRef, state, dispatch, throttledEmit) {\n    const socket = socketRef.current\n    const localPlayerId = state.localPlayerId\n    const localPlayer = localPlayerId ? state.players[localPlayerId] : undefined\n\n    console.assert(socketRef.current || action.type === \"initialize\", \"tried executing action before initialization: \", action.type)\n\n    // console.log(\"execute_action: \", action)\n\n    switch (action.type) {\n        case \"initialize\":\n\n            socketRef.current = io(serverURL)\n            dispatch({type: \"update_local_player\", player: action.player})\n            socketRef.current.emit(\"event\", { type: \"player_enter_request\", player: action.player })\n            break;\n        case \"key_down\":\n\n            if (!RECOGNIZED_KEYS.includes(action.key))\n                return\n\n            dispatch({ type: \"update_player_key_state\", key: action.key, state: true, playerId: localPlayerId})\n            socket.emit(\"event\", { type: \"input_key_down\", playerId: localPlayerId, key: action.key })\n            break;\n        case \"key_up\":\n\n            if (!RECOGNIZED_KEYS.includes(action.key))\n                return\n\n            dispatch({ type: \"update_player_key_state\", key: action.key, state: false, playerId: localPlayerId})\n            socket.emit(\"event\", { type: \"input_key_up\", playerId: localPlayerId, key: action.key })\n            break;\n        case \"update_player_target\":\n            dispatch({ type: \"update_player_target\", playerId: localPlayerId, target: action.target })\n            throttledEmit({ type: \"player_target_change\", playerId: localPlayerId, target: action.target })\n            break;\n        case \"send_chat_message\":\n            socket.emit(\"event\", { type: \"chat_message\", message: action.message, player: localPlayer, time: new Date() })\n            break;\n        case \"update_structure\":\n            dispatch(action)\n            socket.emit(\"event\", {...action, playerId: localPlayerId})\n            break;\n        case \"update_player\":\n            dispatch(action)\n            socket.emit(\"event\", action)\n            break;\n        default:\n            new Error(\"unrecognized action:\", action)\n            break;\n    }\n}\n\nfunction handleServerEvent(event, state, dispatch, socket) {\n\n    const localPlayerId = state.localPlayerId\n    const localPlayer = localPlayerId ? state.players[localPlayerId] : undefined\n\n    // console.log(\"server event:\", event)\n\n    switch (event.type) {\n        case \"player_enter\":\n            console.log(\"player_enter: \", event.player)\n            dispatch({type: \"update_player\", player: event.player})\n            break;\n        case \"player_exit\":\n            console.log(\"player_exit: \", event.player)\n            if (state.players[event.player.id] && event.player.id !== localPlayerId) {\n                dispatch({ type: \"remove_player\", playerId: event.player.id})\n            }\n            break;\n        case \"full_state_request\":\n            socket.emit(\"event\", { type: \"full_state_response\", state })\n            break;\n        case \"full_state_update\":\n            dispatch({ type: \"replace_state\", state: { ...event.state, localPlayerId}})\n            break;\n        case \"input_key_down\":\n            if (event.playerId === localPlayerId)\n                return\n\n            dispatch({ type: \"update_player_key_state\", key: event.key, state: true, playerId: event.playerId})\n            break;\n        case \"input_key_up\":\n            if (event.playerId === localPlayerId)\n                return\n\n            dispatch({ type: \"update_player_key_state\", key: event.key, state: false, playerId: event.playerId })\n            break;\n        case \"chat_message\":\n\n            if ((event.playerId && !state.players[event.playerId])) {\n                break\n            }\n\n\n            const messageDisplayTime = 5000 + (1000 * Math.floor(event.message.length / 100))\n            dispatch({ type: \"add_player_message\", playerId: event.player.id, message: {...event}})\n\n            setTimeout(() => {\n                dispatch({ type: \"remove_oldest_player_message\", playerId: event.player.id})\n            }, messageDisplayTime)\n            \n            break;\n        case \"player_target_change\":\n            if ((event.playerId && !state.players[event.playerId]) || event.playerId === state.localPlayerId) {\n                break\n            }\n\n            dispatch({type: \"update_player_target\", playerId: event.playerId, target: event.target})\n            break;\n        case \"update_player\":\n\n            if (event.player.id === localPlayerId)\n                break\n            dispatch({type: \"update_player\", player: event.player})\n            break;\n        case \"update_structure\":\n            if (event.playerId === localPlayerId)\n                break\n            dispatch({ type: \"update_structure\", structure: event.structure})\n            break;\n        default:\n            console.log(\"unrecognized server event: \", event)\n            break;\n        }\n}\n\nexport default usePlayground","export default class Const {\n    static MODE_DEFAULT = \"default\"\n    static MODE_MENU = \"menu\"\n    static MODE_EXTRUDE = \"extrude\"\n    static MODE_MATERIALS = \"materials\"\n    static STRUCTURE_MODE_EXTRUDE = 'structure_extrude'\n}","class MeshEvents {\n    static MOUSE_MOVE = 'mouse_move'\n    static CLICK = 'click'\n    static POINTER_OUT = 'pointer_out'\n    static POINTER_OVER = 'pointer_over'\n    static eventMaps = {}\n\n    static listenFor(id, eventsToHandlers, includedMeshes) {\n\n        eventsToHandlers.includedMeshes = includedMeshes\n        MeshEvents.eventMaps[id] = eventsToHandlers\n    }\n\n    static removeListener(id) {\n        delete MeshEvents.eventMaps[id]\n    }\n\n    static eventOccurred(type, event) {\n        Object.values(MeshEvents.eventMaps).forEach(handlerMap => {\n            const meshQualifies = !handlerMap.includedMeshes || handlerMap.includedMeshes.includes(event.object.id)\n            if (meshQualifies && handlerMap[type]) {\n                 handlerMap[type](event)\n            }\n        })\n    }\n}\n\nexport default MeshEvents","import { MD2CharacterComplex } from 'three/examples/jsm/misc/MD2CharacterComplex.js';\nimport { MathUtils, Vector3 } from 'three'\nimport Util from './Util'\n\nconst WEAPONS_ENABLED = true\nconst MD2_SCALE = 1\nconst MD2_CONTROLS = {\n    moveForward: false,\n    moveBackward: false,\n    moveLeft: false,\n    moveRight: false,\n    moveUp: false,\n    moveDown: false,\n    crouch: false,\n    jump: false,\n    attack: false\n}\n\nclass ModelFactory {\n    static base\n    static skinCount\n    static instanceIndex = 2\n\n    static init() {\n        \n\n        const configOgro = {\n\n            baseUrl: \"models/ogro/\",\n\n            body: \"ogro.md2\",\n            skins: [\"grok.jpg\", \"ogrobase.png\", \"arboshak.png\", \"ctf_r.png\", \"ctf_b.png\", \"darkam.png\", \"freedom.png\",\n                \"gib.png\", \"gordogh.png\", \"igdosh.png\", \"khorne.png\", \"nabogro.png\",\n                \"sharokh.png\"],\n            weapons: [[\"weapon.md2\", \"weapon.jpg\"]],\n            animations: {\n                move: \"run\",\n                idle: \"stand\",\n                jump: \"jump\",\n                attack: \"attack\",\n                crouchMove: \"cwalk\",\n                crouchIdle: \"cstand\",\n                crouchAttach: \"crattack\"\n            },\n\n            walkSpeed: 1000,\n            crouchSpeed: 175\n        }\n\n        this.skinCount = configOgro.skins.length\n\n        this.base = new MD2CharacterComplex()\n        this.base.scale = MD2_SCALE;\n        this.basePromise = new Promise((resolve, reject) => {\n            this.base.onLoadComplete = () => {\n                this.base.enableShadows(true)\n                this.base.setSkin(2);\n                resolve(this.base)\n            }\n        })\n        this.base.loadParts(configOgro);\n    }\n\n    static customizeMovement(instance) {\n\n        // We use this to override a function defined\n        // on MD2CharacterComplex\n        const customUpdateMovementModel = self => {\n            return delta => {\n                var controls = self.controls;\n                self.decceleration = 1500\n                self.maxSpeed = self.walkSpeed\n                if (self.t === undefined)\n                    self.t = 100\n\n                if (!self.moveDirection)\n                    self.moveDirection = new Vector3()\n\n                const moveForward = controls.moveForward ? 1 : 0\n                const moveBackward = controls.moveBackward ? -1 : 0\n                const moveRight = controls.moveRight ? -1 : 0\n                const moveLeft = controls.moveLeft ? 1 : 0\n                const moveUp = controls.moveUp ? 1 : 0\n                const moveDown = controls.moveDown ? -1 : 0\n\n                self.impulseDirection = new Vector3(moveRight + moveLeft, moveUp + moveDown, moveForward + moveBackward)\n                self.impulseDirection.normalize()\n\n                // Rotate toward 'target' (where ray cast from cursor hits scene object)\n                const forwardVec = new Vector3(0, 0, 1).applyAxisAngle(new Vector3(0, 1, 0), self.bodyOrientation)\n                const target = new Vector3(self.target.x, self.target.y, self.target.z)\n                const toTarget = target.clone().sub(self.root.position).normalize()\n                toTarget.y = 0\n                const rotationGap = forwardVec.cross(toTarget).y\n                self.bodyOrientation += rotationGap * delta * 10\n\n                self.impulseDirection.applyAxisAngle(new Vector3(0, 1, 0), self.bodyOrientation)\n\n                if (self.impulseDirection.length() > 0) {\n                    self.moveDirection.copy(self.impulseDirection)\n                }\n\n                // Animate while turning\n                if (Math.abs(rotationGap) > 0.2) {\n                    self.speed = rotationGap * delta * 10\n                    if (rotationGap < 0)\n                        controls.moveLeft = true\n                    else\n                        controls.moveRight = true\n                }\n\n\n                if (self.impulseDirection.length() > 0) {\n                    self.speed = self.maxSpeed // We don't bother accelerating--jump to max speed\n                } else {\n                    const k = Util.exponentialEaseOut(self.speed / self.maxSpeed);\n                    self.speed = MathUtils.clamp(self.speed - k * delta * self.decceleration, 0, self.maxSpeed);\n                }\n\n                // displacement\n                const deltaVec = self.moveDirection.clone().multiplyScalar(self.speed * delta / 10)\n                self.root.position.add(deltaVec)\n\n                self.root.rotation.y = self.bodyOrientation;\n            }\n        }\n\n        instance.updateMovementModel = customUpdateMovementModel(instance)\n    }\n\n    static async getModelInstance(skin = this.instanceIndex) {\n        this.instanceIndex = (this.instanceIndex + 1) % this.skinCount\n\n        const instance = new MD2CharacterComplex()\n        instance.scale = MD2_SCALE\n        instance.controls = this.getControlsCopy()\n        instance.id = Math.random()\n        this.customizeMovement(instance)\n\n        return await this.basePromise.then(base => {\n            instance.shareParts(base)\n            instance.enableShadows(true);\n            instance.setSkin(skin)\n            instance.target = new Vector3()\n\n            if (WEAPONS_ENABLED)\n                instance.setWeapon(0)\n\n            return instance\n        })\n    }\n\n    static getControlsCopy() {\n        const controls = {}\n        Object.keys(MD2_CONTROLS).forEach(key => controls[key] = MD2_CONTROLS[key])\n        return controls\n    }\n}\n\nModelFactory.init()\n\nexport default ModelFactory","import React, { useEffect, useMemo, useState } from 'react'\nimport * as THREE from 'three'\nimport { Line2 } from 'three/examples/jsm/lines/Line2.js';\nimport { LineMaterial } from 'three/examples/jsm/lines/LineMaterial.js';\nimport { LineGeometry } from 'three/examples/jsm/lines/LineGeometry.js';\nimport { useFrame, useThree, Dom } from 'react-three-fiber'\nimport { useDOM } from './w-hooks'\nimport ModelFactory from '../ModelFactory'\nimport Util from '../Util'\nimport './Player.css'\nimport { Vector2 } from 'three';\nimport Const from '../constants'\n\n// let imageCapture\n// let texture\n// let outerTick = 0\n\nconst PLAYER_SPEED_SCALE = 1.75\n\nfunction Player({ player, isLocalPlayer, t }) {\n    const [md2, setMd2] = useState(null)\n    const [height, setHeight] = useState(0)\n    const [laser, setLaser] = useState(null)\n    const { size } = useThree()\n    // const [tick, setTick] = useState(0)\n\n    useDOM(['#player-label-' + player.id], [\"md2-root-\" + player.id])\n\n    useEffect(() => {\n        const label = document.createElement(\"div\")\n        label.id = 'player-label-' + player.id\n        label.className = \"scene-label\"\n        label.innerText = player.name\n        const app = document.getElementsByClassName(\"App\")[0]\n        app.appendChild(label)\n\n        return () => app.removeChild(label)\n    }, [player.id, player.name])\n\n    useEffect(() => {\n        if (md2) {\n            if (t === -1 || md2.root.position.y > 25) return\n\n            md2.t = t\n\n            if (!isLocalPlayer) {\n                md2.root.position.copy(player.position)\n            }\n        } \n    }, [t, md2, player])\n\n    useEffect(() => {\n        ModelFactory.getModelInstance(player.skindex).then(instance => {\n            const bbox = Util.computeCompositeBoundingBox(instance.root)\n\n            instance.root.userData.name = \"md2-root-\"+player.id\n\n            setHeight(bbox.getSize().y)\n            setMd2(instance)\n\n            instance.root.position.set(player.position.x, instance.root.position.y, player.position.z)\n\n            const geometry = new LineGeometry();\n            geometry.setPositions([0, 0, 0, 0, 0, 100])\n\n            // Laser colors\n            // 0x66ff11\n            // 0x0033dd\n            // 0x11ff66\n            // 0x882288\n            const matLine = new LineMaterial({\n                color: 0x66ff11,\n                linewidth: 2,\n                vertexColors: false,\n                dashed: false,\n                resolution: new Vector2(size.width, size.height)\n            });\n\n            const line = new Line2(geometry, matLine)\n            instance.root.add(line)\n\n            setLaser(line)\n        })\n    }, [])\n\n    // useEffect(() => {\n    //     setInterval(() => {\n    //         setTick(++outerTick)\n    //     }, 400)\n    // }, [])\n\n    // const vidTex = useMemo(() => {\n    //     return getVideoTexture()\n    // }, [tick])\n\n    useFrame((info, delta) => {\n        if (md2) {\n            md2.controls.moveForward = player.keyStates['w'] || player.keyStates['ArrowUp']\n            md2.controls.moveBackward = player.keyStates['s'] || player.keyStates['ArrowDown']\n            md2.controls.moveLeft = player.keyStates['a'] || player.keyStates['ArrowLeft']\n            md2.controls.moveRight = player.keyStates['d'] || player.keyStates['ArrowRight']\n            md2.controls.moveUp = player.keyStates['q']\n            md2.controls.moveDown = player.keyStates['e']\n            md2.controls.jump = player.keyStates[' ']\n            md2.controls.attack = player.keyStates['f']\n            md2.update(delta * PLAYER_SPEED_SCALE)\n            md2.t += delta * PLAYER_SPEED_SCALE\n            md2.root.position.y = Math.max(24.25, 24.25 + md2.t ** 2 * -18.369 * 15 + md2.t * 17.209 * 15)\n            player.position.x = md2.root.position.x\n            player.position.y = md2.root.position.y\n            player.position.z = md2.root.position.z\n\n            md2.target = player.target\n            const pos = new THREE.Vector3(player.position.x, player.position.y, player.position.z)\n            const tar = new THREE.Vector3(md2.target.x, md2.target.y, md2.target.z)\n\n            tar.sub(pos)\n\n            laser.rotation.y = -md2.bodyOrientation\n            laser.geometry.setPositions([0, 20, 5, tar.x, tar.y, tar.z])\n            laser.geometry.needsUpdate = true\n        }\n    })\n\n    return (\n        <mesh>\n            {md2 && \n                <>\n                    <primitive object={md2.root} onClick={e => console.log('click')}>\n                        {/* <mesh position={[0, 200, -100]}>\n                            <planeBufferGeometry attach=\"geometry\" args={[250, 150]} />\n                            <meshBasicMaterial attach=\"material\" side={THREE.DoubleSide}>\n                                <primitive attach=\"map\" object={vidTex} wrapS={THREE.ClampToEdgeWrapping} wrapT={THREE.ClampToEdgeWrapping} encoding={THREE.sRGBEncoding}/>\n                            </meshBasicMaterial>\n                        </mesh> */}\n                    </primitive>\n\n                    {player.visibleMessages.map((message, i) => (\n                        <Dom key={message.time} center position={[player.position.x, player.position.y + height/1.5, player.position.z]}>\n                            <div style={{transform: `translateY(${-i*2.1}rem)`}} className=\"speech-bubble\">{message.message}</div>\n                        </Dom>\n                    ))}\n                </>\n            }\n        </mesh>\n    )\n}\n\n// function getVideoTexture() {\n//     if (!texture)\n//         texture = new THREE.Texture()\n\n//     var video = document.getElementById('video');\n\n//     const drawCanvas = img => {\n//         const canvas = document.getElementById('test-canvas');\n//         canvas.width = getComputedStyle(canvas).width.split('px')[0];\n//         canvas.height = getComputedStyle(canvas).height.split('px')[0];\n//         let ratio = Math.min(canvas.width / img.width, canvas.height / img.height);\n//         let x = (canvas.width - img.width * ratio) / 2;\n//         let y = (canvas.height - img.height * ratio) / 2;\n//         canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\n//         canvas.getContext('2d').drawImage(img, 0, 0, img.width, img.height,\n//             x, y, img.width * ratio, img.height * ratio);\n\n//         canvas.width = 256\n//         canvas.height = 256\n//         canvas.style.width = \"256px\"\n//         canvas.style.height = \"256px\"\n\n//         return canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height)\n//     }\n\n//     const updateTexture = async imageCapture => {\n//         const { imageWidth, imageHeight } = await imageCapture.getPhotoCapabilities();\n//         // console.log(\"asdf\", imageWidth, imageHeight)\n\n//         imageCapture.takePhoto({imageWidth: imageWidth.min, imageHeight: imageHeight.min})\n//             .then(blob => createImageBitmap(blob))\n//             .then(imageBitmap => {\n//                 texture.image = drawCanvas(imageBitmap)\n//                 texture.format = THREE.RGBAFormat\n//                 texture.needsUpdate = true\n//             })\n//             .catch(error => console.log(error));\n//     }\n\n//     if (!imageCapture) {\n//         navigator.mediaDevices.getUserMedia({ video: true, audio: false })\n//             .then(mediaStream => {\n//                 video.srcObject = mediaStream;\n\n//                 const track = mediaStream.getVideoTracks()[0];\n//                 imageCapture = new ImageCapture(track);\n\n//                 return imageCapture\n//             }).then(imageCapture => {\n//                 updateTexture(imageCapture)\n//             }).catch(error => console.log('Error with video stream capture', error.name || error))\n//     } else {\n\n//         updateTexture(imageCapture)\n//     }\n\n//     return texture\n// }\n\nexport default Player","import { useState } from 'react'\nimport {useThree, useFrame} from 'react-three-fiber'\nimport Util from '../Util'\nimport { Vector3 } from 'three'\n\nfunction useDOM(domSelectors, sceneNames) {\n    const {scene, size, camera} = useThree()\n\n    useFrame(() => {\n\n        const domNodes = domSelectors.map(s => document.querySelector(s))\n        const sceneNodes = []\n\n        sceneNames.forEach(nodeName => {\n            scene.traverse(node => {\n                if (node.userData.name === nodeName) {\n                    sceneNodes.push(node)\n                }\n            })\n        })\n\n        if (domNodes.length === sceneNodes.length) {\n            domNodes.forEach((dNode, i) => {\n                const sNode = sceneNodes[i]\n                \n                const worldPoint = new Vector3()\n                sNode.getWorldPosition(worldPoint)\n\n                const screenPoint = Util.vec3ToScreenPoint(worldPoint, camera, size.width, size.height)\n\n                dNode.style.position = \"absolute\"\n                dNode.style.zIndex = \"10000\"\n                dNode.style.transform = \"translateX(-50%)\"\n\n                dNode.style.left = screenPoint.x + \"px\"\n                dNode.style.top = screenPoint.y + \"px\"\n            })\n        }\n    })\n}\n\nexport {useDOM}","import React, { useRef, useEffect, useMemo } from 'react'\nimport {DoubleSide, Vector3, Vector2, AdditiveBlending} from 'three'\nimport {useThree, useFrame} from 'react-three-fiber'\n\nconst plane_size = 10000\n\nfunction TangentGrid({position, orientation, target, mouse, cellSize}) {\n    const { size } = useThree()\n    const meshRef = useRef()\n\n    useEffect(() => {\n        if (meshRef.current) {\n            const laPoint = position.clone().addScaledVector(orientation, 5)\n            meshRef.current.lookAt(laPoint)\n        }\n    }, [position, orientation])\n\n    const uniforms = useMemo(() => {\n        return {\n            vTarget: { value: target },\n            planeSize: { value: new Vector2(plane_size, plane_size) },\n            mouse: { value: mouse },\n            cellSize: { value: cellSize},\n        }\n    }, [])\n\n    useFrame(() => {\n        uniforms.mouse.value.x = mouse.x\n        uniforms.mouse.value.y = size.height - mouse.y\n        uniforms.cellSize.value = cellSize\n        uniforms.vTarget.value = target\n    })\n\n    const fragmentShader = `\n        varying vec3 norm;\n        varying vec2 pos;\n        varying vec3 posW;\n        varying vec2 vUv;\n        varying vec3 target;\n        varying vec2 px;\n\n        uniform vec2 planeSize;\n        uniform vec2 mouse;\n        uniform float cellSize;\n\n        float gridValue(vec2 coord){\n            vec2 nCoord = (coord / cellSize);\n            vec2 grid = abs(fract(nCoord) - 0.5) / fwidth(nCoord*2.95);\n            float line = min(grid.x, grid.y);\n            return 1.0 - min(line, 1.0);\n        }\n\n        float gridVal2(vec3 coord){\n            vec3 nCoord = (coord / cellSize) - cellSize/4.;\n            vec3 grid = abs(fract(nCoord) - 0.5);\n            float line = max(max(grid.x, grid.y), grid.z);\n            return 1. - step(.1, line);\n        }\n\n        void main() {\n            vec4 blue = vec4(0., 0., 1.5, 0.5);\n            float blendFactor = min(2.3 / length(fwidth(vUv)), 1.0);\n            vec2 shiftedPos = pos + cellSize/2.;\n            float gridVal = gridValue(shiftedPos);\n            \n            // go from screen coords to [0, 1]\n            vec2 mouseOffset = (gl_FragCoord.xy - mouse) / planeSize.x;\n\n            // float mouseToPoint = 1.;\n            // float mouseToEdge = gridVal2(target);\n            // float pointToEdge = gridVal2(posW); //1. - step(.55, length(fract(posW / cellSize)));\n            float on = 0.; //min(min(pointToEdge, mouseToEdge), mouseToPoint);\n\n            float spotlight = (1. - smoothstep(0.04, 0.065, length(vUv - 0.5 + mouseOffset)));\n\n            gl_FragColor = blue * gridVal * spotlight * blendFactor + vec4(1., 0., 0., 0.85)*on;\n        }\n    `\n\n    const vertexShader = `\n        varying vec3 norm;\n        varying vec2 pos;\n        varying vec3 posW;\n        varying vec2 vUv;\n        varying vec3 target;\n        varying vec2 px;\n\n        uniform vec2 planeSize;\n        uniform vec2 mouse;\n        uniform vec3 vTarget;\n\n        void main() {\n            norm = normalize(normalMatrix * normal);\n            pos = ((uv - 0.5) * planeSize);\n            posW = position;\n            target = vTarget;\n            vUv = uv;\n            px = (2.0*uv - 1.0)/2.0 * planeSize;\n\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n    `\n\n    return (\n        <mesh ref={meshRef} position={position}>\n            <planeGeometry attach=\"geometry\" args={[plane_size, plane_size]}></planeGeometry>\n            <shaderMaterial attach=\"material\" extensions={{derivatives: true}} blending={AdditiveBlending} depthTest={false} depthWrite={true} transparent side={DoubleSide} uniforms={uniforms} fragmentShader={fragmentShader} vertexShader={vertexShader} />\n        </mesh>\n    )\n}\n\nexport default TangentGrid","import {Vector2} from 'three'\n\n\nconst mousePos = new Vector2()\nconst keyStates = {}\n\nexport { mousePos, keyStates }","import React, {useState, useEffect} from 'react'\nimport { Vector3, Vector2 } from 'three'\nimport { extend, useThree, useUpdate } from \"react-three-fiber\"\nimport { Line2 } from 'three/examples/jsm/lines/Line2.js'\nimport { LineMaterial } from 'three/examples/jsm/lines/LineMaterial.js'\nimport { LineGeometry } from 'three/examples/jsm/lines/LineGeometry.js'\nimport MeshEvents from '../MeshEvents'\nimport Util from '../Util'\nimport TangentGrid from './TangentGrid'\nimport { mousePos} from '../global'\n\nextend({ LineMaterial, LineGeometry, Line2 })\n\nconst MAX_POLY_POINTS = 50\nconst SNAP_RADIUS = 22\n\nfunction PartialStructure({player, finishStructureFunc}) {\n    const [points, setPoints] = useState([])\n    const [cursorPoint, setCursorPoint] = useState(null)\n    const [inSnapRange, setInSnapRange] = useState(false)\n    const [gridConfig, setGridConfig] = useState({position: new Vector3(), target: new Vector2(), orientation: new Vector3(), mouse: new Vector2()})\n    const { size } = useThree()\n\n    const visible = points.length > 0\n\n    useEffect(() => {\n        const handleMeshMouseMove = e => {\n            if (visible) {\n                const vec = new Vector3(e.point.x, e.point.y, e.point.z)\n                setCursorPoint(vec)\n\n                const rotation = e.object.rotation.clone()\n                const normal = e.face.normal.clone().applyEuler(rotation)\n\n                // calculate side lengths of intersected face\n                const vecs = ['a', 'b', 'c'].map(key => {\n                    const i = e.face[key]\n                    const nonBuffer = e.object.geometry.vertices\n                    const verts = e.object.geometry.vertices || e.object.geometry.attributes['position'].array\n                    \n                    if (nonBuffer) {\n                        return verts[i].clone()\n                    } else {\n                        return new Vector3(verts[i * 3], verts[i * 3 + 1], verts[i * 3 + 2])\n                    }\n                }).map(p => p.applyEuler(rotation))\n\n                const l1 = vecs[1].clone().sub(vecs[0])\n                const l2 = vecs[2].clone().sub(vecs[1])\n                const l3 = vecs[0].clone().sub(vecs[2])\n\n                const sides = [l1, l2, l3]\n                sides.sort((b, a) => a.length() - b.length())\n                sides.pop()\n                const avgSideLength = (sides[0].length() + sides[1].length()) / 2\n\n                const u = sides[0].clone().normalize()\n                const v = sides[1].clone().normalize()\n\n                let x = u.clone().multiplyScalar(u.dot(e.point.clone().sub(points[0])))\n                let y = v.clone().multiplyScalar(v.dot(e.point.clone().sub(points[0])))\n                const target2d = new Vector2(x.length(), y.length())\n\n                console.log(\"target2d\", target2d)\n\n                if (points.length > 0) {\n                    setGridConfig({\n                        ...gridConfig,\n                        position: points[0].clone(),\n                        orientation: normal,\n                        target: e.point.clone(),\n                        mouse: new Vector2(mousePos.x, mousePos.y),\n                        cellSize: Math.min(avgSideLength / 5, 50)\n                    })\n                }\n            }\n        }\n\n        const handleMeshClick = e => {\n            if (e.shiftKey) return\n\n            const vec = new Vector3(e.point.x, e.point.y, e.point.z)\n\n            let finish = false\n            if (points.length > 2) {\n                const snapDiffVec = vec.clone().sub(points[0])\n                if (snapDiffVec.length() < SNAP_RADIUS) {\n                    vec.add(snapDiffVec)\n                    finish = true\n                }\n            }\n\n            setPoints([...points, vec])\n\n            if (finish) {\n\n                // This snippet may be useful soon\n                const rotation = e.object.rotation.clone()\n                // rotation.x *= -1\n                // rotation.y *= -1\n                // rotation.z *= -1\n\n                const normal = e.face.normal.clone().applyEuler(rotation)\n                // const centroid = Util.centroid(points)\n                // const extrusionLine = {start: centroid, end: centroid.clone().addScaledVector(normal, 10)}\n\n                const structure = { id: Util.generateId(), owner: player.id, points, normal, extrusionParams: { depth: 4, row: 0, theta: 0, bevelThickness: 3, bevelSize: 4, bevelSegments: 4, steps: 1} }\n\n                finishStructureFunc(structure)\n                setPoints([])\n                setInSnapRange(false)\n                setCursorPoint(null)\n            }\n        }\n\n        MeshEvents.listenFor(\"partial_structure\", {\n            [MeshEvents.MOUSE_MOVE]: handleMeshMouseMove,\n            [MeshEvents.CLICK]: handleMeshClick,\n        })\n\n        return () => {\n            MeshEvents.removeListener(\"partial_structure\")\n        }\n\n    }, [points])\n\n    const ref = useUpdate(geom => {\n        if (points.length < 1 || cursorPoint === null) {\n            geom.setPositions(new Float32Array(MAX_POLY_POINTS*3))\n            return\n        }\n\n        const modCursorPoint = cursorPoint.clone()\n        if (points.length > 2) {\n            const snapDiffVec = points[0].clone().sub(cursorPoint)\n\n            // within snap radius\n            if (snapDiffVec.length() < SNAP_RADIUS) {\n                modCursorPoint.add(snapDiffVec)\n                setInSnapRange(true)\n            } else {\n                setInSnapRange(false)\n            }\n\n            // Check if first and last points overlap\n            if (points[0].clone().sub(points[points.length - 1]).length() < 0.1) {\n                finishStructureFunc(points)\n                setPoints([])\n                setInSnapRange(false)\n                setCursorPoint(null)\n            }\n        }\n            \n        const finalPoints = points.reduce((acc, { x, y, z }) => [...acc, x, y, z], [], [])\n        finalPoints.push(modCursorPoint.x, modCursorPoint.y, modCursorPoint.z)\n\n        // The number of points must always be exactly the same,\n        // so will fill the end with the last point added repeatedly\n        while (finalPoints.length < MAX_POLY_POINTS*3) {\n            finalPoints.push(finalPoints[finalPoints.length - 3], finalPoints[finalPoints.length - 2], finalPoints[finalPoints.length - 1])\n        }\n\n        finalPoints.length = Math.min(MAX_POLY_POINTS*3, finalPoints.length)\n\n        geom.setPositions(finalPoints)\n    }, [points, cursorPoint])\n\n    return  (\n        <>\n            <line2>\n                <lineGeometry attach=\"geometry\" ref={ref} />\n                <lineMaterial attach=\"material\" color={0x66ff11} linewidth={10} resolution={[size.width, size.height]} />\n            </line2>\n\n            {points.map((point, i) => (\n                <mesh key={point.x+point.y+point.z+\"\"} castShadow position={[point.x, point.y, point.z]}>\n                    <sphereGeometry attach=\"geometry\" args={[(i === 0 && inSnapRange) ? SNAP_RADIUS : 7, 32, 32]} />\n                    <meshPhysicalMaterial attach=\"material\" color={(i === 0 && inSnapRange) ? 0x00ff00 : 0x117700} clearcoat metalness={0.25} clearcoatRoughness={0.75} roughness={0.1}/>\n                </mesh>\n            ))}\n\n            {visible &&\n                <TangentGrid\n                    position={gridConfig.position}\n                    orientation={gridConfig.orientation}\n                    target={gridConfig.target}\n                    mouse={gridConfig.mouse}\n                    cellSize={gridConfig.cellSize}\n                />\n            }\n        </>\n    )\n}\n\nexport default PartialStructure","import React, { useState, useEffect, useRef } from 'react'\nimport { Shape, Vector2, Vector3, Quaternion, LineCurve3, Euler } from 'three'\nimport { useUpdate, useFrame } from 'react-three-fiber'\nimport MeshEvents from '../MeshEvents'\nimport Const from '../constants'\nimport Util from '../Util'\n\nconst INITIAL_EXTRUSION_DEPTH = 4\n\nfunction Structure({structure, updateStructure, active, player, onPointerMove, onClick, onPointerOut, mode, setMode, shiftDown, mouseTravel}) {\n    const [baseShape, setBaseShape] = useState(null)\n    const [overMainFace, setOverMainFace] = useState(false)\n    const [dragStartPoint, setDragStartPoint] = useState(null)\n    const [position, setPosition] = useState(new Vector3())\n    const meshRef = useRef()\n\n    useEffect(() => {\n        const centroid = Util.centroid(structure.points)\n        const normal = new Vector3().copy(structure.normal)\n        const dest = new Vector3(0, 0, 1)\n        const quat = new Quaternion()\n        quat.setFromUnitVectors(normal, dest)\n        const shiftedPoints = structure.points.map(p => new Vector3(p.x - centroid.x, p.y - centroid.y, p.z - centroid.z))\n        const rotatedPoints = shiftedPoints.map(p => p.clone().applyQuaternion(quat))\n        setBaseShape(new Shape(rotatedPoints.map(p => new Vector2(p.x, p.y))))\n        setPosition(centroid)\n    }, [structure.points])\n\n    useEffect(() => {\n        const handleMeshMouseMove = e => {\n            if (!e.shiftKey) {\n                setOverMainFace(false)\n                return\n            }\n\n            // faces have three verts a, b, c.\n            // We use the first arbitrarily\n            const hoverFaceIndex = e.face.a\n\n            if (hoverFaceIndex >= 0 && hoverFaceIndex <= mainPolyVertexCount(structure.points.length)) {\n                setOverMainFace(true)\n            } else {\n                setOverMainFace(false)\n            }\n        }\n        const handlePointerOut = e => {\n            setOverMainFace(false)\n        }\n\n        const handleMeshClick = e => {\n            if (mode === Const.MODE_DEFAULT) {\n                if (e.shiftKey) {\n                    setMode(Const.MODE_EXTRUDE, structure.id)\n                }\n            } else if (active && mode === Const.MODE_EXTRUDE) {\n                updateStructure(structure)\n            }\n        }\n\n        if (meshRef.current) {\n            MeshEvents.listenFor(\"structure_\" + structure.id, {\n                [MeshEvents.MOUSE_MOVE]: handleMeshMouseMove,\n                [MeshEvents.CLICK]: handleMeshClick,\n                [MeshEvents.POINTER_OUT]: handlePointerOut,\n                [MeshEvents.POINTER_OVER]: handleMeshMouseMove\n            }, [meshRef.current.id])\n        }\n    }, [meshRef.current, overMainFace, structure, mode, active])\n\n    const showHighlightedMaterial = active && mode === Const.MODE_EXTRUDE\n    const highlightExtrusionSurface = baseShape && overMainFace && mode === Const.MODE_DEFAULT\n\n    return (\n        <>\n            {baseShape &&\n                <mesh ref={meshRef} quaternion={rotationFromNormal(structure.normal)} position={position} castShadow receiveShadow onPointerMove={onPointerMove} onClick={onClick} onPointerOut={onPointerOut}>\n                <extrudeGeometry attach=\"geometry\" args={[baseShape, structure.extrusionParams]} />\n                    \n                    {showHighlightedMaterial &&\n                        <meshPhysicalMaterial attach=\"material\" color={0x000000} emissive={0x00ff00} emissiveIntensity={0.7} metalness={0.9} roughness={0.1} clearcoat clearcoatRoughness={0.25} />\n                    }\n\n                    {!showHighlightedMaterial &&\n                        // Nice white\n                        // <meshPhysicalMaterial attach=\"material\" color={0xffffff} metalness={0.9} roughness={0} clearcoat clearcoatRoughness={0.25} />\n\n                        // Nice black\n                        <meshPhysicalMaterial attach=\"material\" color={0x000000} emmissive={0x00ff00} metalness={0.9} roughness={0.1} clearcoat clearcoatRoughness={0.25} />\n                    }\n                </mesh>\n            }\n\n            {baseShape && mode !== Const.MODE_EXTRUDE &&\n                <mesh quaternion={rotationFromNormal(structure.normal)} position={getIndicatorPosition(position, structure.normal, structure.extrusionParams.depth)}>\n                    <extrudeBufferGeometry attach=\"geometry\" args={[baseShape, { depth: 1, bevelSize: 1, bevelThickness: 1, bevelSegments: 2 }]} />\n\n                    {highlightExtrusionSurface &&\n                        <meshPhysicalMaterial attach=\"material\" color={0x000000} emissive={0x0033dd} metalness={0.9} roughness={0.1} clearcoat clearcoatRoughness={0.25} />\n                    }\n                    {!highlightExtrusionSurface &&\n                        <meshPhysicalMaterial attach=\"material\" color={0x000000} emissive={0x0033dd} emissiveIntensity={0.05} metalness={0.9} roughness={0.1} clearcoat clearcoatRoughness={0.25} />\n                    }\n\n                </mesh>\n            }\n        </>\n    )\n\n    function getIndicatorPosition(position, normal, depth) {\n        return position.clone().addScaledVector(normal, depth + 1.5)\n    }\n\n    function rotationFromNormal(normal) {\n        const quat = new Quaternion()\n        quat.setFromUnitVectors(new Vector3(0, 0, 1), normal)\n\n        return quat\n    }\n\n    function calcPosition(position, normal, depth) {\n        const rotation = rotationFromNormal(normal)\n        const axis = new Vector3(0, 0, 1)\n        axis.applyQuaternion(rotation).normalize()\n\n        const transformed = axis.multiplyScalar(depth)\n        // console.log(\"axis\", transformed)\n\n        return position\n    }\n\n    // Maybe refer to this example: https://github.com/defmech/Three.js-Object-Rotation-with-Quaternion\n    // But I expect the issue here has to do with how extrusion geometry works... not sure.\n    function computeParams(params, mouseTravel) {\n        // It's always positive z-axis since we're using the normal of\n        // the 2d Shape (which uses x,y coords)\n        const normal = new Vector3(0, 0, 1)\n\n        const row = ( Math.PI / 2 ) * (mouseTravel.x / 1000)\n        const theta = ( Math.PI / 2 ) * (mouseTravel.y / 100)  \n        \n        const quat1 = new Quaternion()\n        const quat2 = new Quaternion()\n        const rotation = new Quaternion()\n        // quat1.setFromAxisAngle(new Vector3(0, 1, 0), theta)\n        // quat2.setFromAxisAngle(new Vector3(1, 0, 0), row)\n        quat1.setFromEuler(new Euler(row, theta, 0, \"XYZ\"))\n        // rotation.multiplyQuaternions(rotation, quat1)\n        // rotation.multiplyQuaternions(rotation, quat2)\n        // const result = rotation.multiply(quat1)\n        normal.applyQuaternion(quat1)\n        const startPoint = new Vector3()\n        const endPoint = startPoint.clone().addScaledVector(normal, params.depth)\n        const line = new LineCurve3(startPoint, endPoint)\n\n        return {...params, extrudePath: line}\n    }\n\n    function mainPolyVertexCount(pointCount) {\n        // This is something I just worked out by observing\n        // different instances of ExtrudeBufferGeometry. It\n        // depends on the internals of ExtrudeBufferGeometry.\n        return (pointCount-2)*6\n    }\n}\n\nexport default Structure","import React, {useState, useRef, useEffect} from 'react'\nimport './ChatWindow.css'\nimport {InputGroup} from '@blueprintjs/core'\n\nfunction ChatWindow({sendChatMessage, localPlayer, players, messages, hideChat}) {\n    const [inputText, setInputText] = useState(\"\")\n    const allMessagesRef = useRef()\n\n    const handleKeyDown = e => {\n        if (e.which === 13) { //check for 'enter' press\n            sendChatMessage({ message: inputText, playerId: localPlayer.id, time: new Date()})\n            setInputText(\"\")\n        } else if (e.which === 27) { //escape key\n            hideChat()\n        }\n\n        e.stopPropagation()\n    }\n\n    useEffect(() => {\n        allMessagesRef.current.scrollTop = allMessagesRef.current.scrollHeight\n    }, [messages])\n\n    return (\n        <div className=\"ChatWindow\">\n            <div className=\"all-messages\" ref={allMessagesRef}>\n                {messages.map(message => (\n                    <div className=\"chat-message\" key={message.time}>\n                        <div className=\"chat-message-name\">{message.player.name}:</div>\n                        <div className=\"chat-message-content\">{message.message}</div>\n                    </div>\n                ))}\n            </div>\n            <InputGroup\n                className=\"your-message\"\n                placeholder=\"your message...\"\n                large\n                onKeyDown={handleKeyDown}\n                value={inputText}\n                onChange={event => setInputText(event.target.value)}\n                autoFocus\n            />\n        </div>\n    )\n}\n\nexport default ChatWindow","import React, {useMemo, useEffect, useState, useRef} from 'react'\nimport * as THREE from 'three'\nimport Stats from 'three/examples/jsm/libs/stats.module.js'\nimport { Canvas, extend, useThree, useFrame } from 'react-three-fiber'\nimport usePlayground from './playground'\nimport Const from './constants'\nimport MeshEvents from './MeshEvents'\nimport Player from './components/Player'\nimport PartialStructure from './components/PartialStructure'\nimport Structure from './components/Structure'\nimport ChatWindow from './components/ChatWindow'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { SSAOPass } from 'three/examples/jsm/postprocessing/SSAOPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport './MainCanvas.css'\nimport { Vector3, MathUtils } from 'three'\nimport Util from './Util'\nimport {mousePos, keyStates} from './global'\n\nextend({ EffectComposer, RenderPass, UnrealBloomPass, SSAOPass })\n\nconst stats = new Stats()\nconst camDest = new Vector3(0, 100, 100)\nconst camLookAtDest = new Vector3(0, 0, 0)\nconst lastLookAtVec = new Vector3()\n\nlet camZoom = 1\n\nconst CameraController = ({localPlayer, mode}) => {\n    const { camera, scene } = useThree()\n\n    useFrame(() => {\n        stats.update()\n        \n        if (mode === Const.MODE_DEFAULT) {\n            const positionObj = localPlayer.position\n            const targetObj = localPlayer.target\n            const position = new Vector3(positionObj.x, positionObj.y, positionObj.z)\n            const shiftedPosition = position.set(position.x, position.y + 70, position.z)\n            const target = new Vector3(targetObj.x, targetObj.y, targetObj.z)\n\n            const toTarget = target.clone().sub(shiftedPosition).normalize()\n            const extension = toTarget.clone().multiplyScalar(-200 * camZoom)\n            extension.z = Math.max(Math.abs(extension.z), 50) * Math.sign(extension.z)\n            extension.y = Math.max(extension.y, 50)\n\n            camDest.copy(position.clone().add(extension))\n\n            camLookAtDest.copy(position)\n\n\n            const scale = MathUtils.clamp(camera.position.clone().sub(camDest).length() / 10, 0.1, 4)\n            camera.position.copy(camera.position.lerp(camDest, 0.005 * scale))\n\n\n            const newLookAt = lastLookAtVec.lerp(camLookAtDest, 0.05).clone()\n            camera.lookAt(newLookAt)\n            camera.updateProjectionMatrix()\n        }\n    })\n\n    return null;\n}\n\nfunction Effects({ssao, bloom}) {\n    const { gl, scene, camera, size } = useThree()\n    const composer = useRef()\n    useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n    useFrame(() => composer.current.render(), 1)\n\n    return (\n        <effectComposer ref={composer} args={[gl]}>\n            <renderPass attachArray=\"passes\" args={[scene, camera]} />\n            {bloom && \n                <unrealBloomPass\n                    attachArray=\"passes\"\n                    args={[undefined, 1.5, 0.4, 0.60]}\n                    bloomThreshold={1}\n                    bloomStrength={1}\n                    bloomRadius={0}\n                />\n            }\n            {ssao &&\n                <sSAOPass\n                    attachArray=\"passes\"\n                    args={[scene, camera, size.width, size.height]}\n                    kernelRadius={16}\n                    minDistance={0.005}\n                    maxDistance={50}\n                />\n            }\n        </effectComposer>\n    )\n}\n\nfunction InputHandler({mode, setMode, execute, structures, chatVisible, setChatVisible, setT, setShiftDown, activeObjectId, setActiveObjectId, mouseTravel, setMouseTravel}) {\n    const { gl, size } = useThree()\n\n    useEffect(() => {\n        gl.domElement.onclick = e => {\n            switch (mode) {\n                case Const.MODE_DEFAULT:\n                    setChatVisible(false)\n\n                    break;\n                case Const.MODE_EXTRUDE:\n                    setMode(Const.MODE_DEFAULT)\n                    break;\n                default:\n                    break;\n            }\n        }\n        window.onkeydown = e => {\n\n            if (e.which === 9) { // tab key\n                e.preventDefault()\n\n                setChatVisible(!chatVisible)\n            }\n\n            keyStates[e.key] = true\n            execute(\"key_down\", {...e, which: e.which, key: e.key})\n            if (e.key === 'Shift') {\n                setShiftDown(true)\n            }\n\n            if (e.key === ' ') {\n                setT(0)\n                setT(-1)\n            }\n        }\n        window.onkeyup = e => {\n            keyStates[e.key] = true\n            if (e.key === 'Shift') {\n                setShiftDown(false)\n            }\n            execute(\"key_up\", { ...e, which: e.which, key: e.key})\n        }\n        gl.domElement.onmousemove = e => {\n\n            mousePos.x = e.clientX\n            mousePos.y = e.clientY\n\n            switch (mode) {\n                case Const.MODE_DEFAULT:\n\n                    break;\n                case Const.MODE_EXTRUDE:\n                    setMouseTravel({x: mouseTravel.x + e.movementX, y: mouseTravel.y + e.movementY})\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        gl.domElement.onwheel = e => {\n            switch (mode) {\n                case Const.MODE_DEFAULT:\n                    e.preventDefault()\n                    camZoom += e.deltaY * 0.01\n                    camZoom = Math.min(Math.max(.05, camZoom), 3)\n                    break;\n                case Const.MODE_EXTRUDE:\n\n                    const activeStructure = structures[activeObjectId]\n                    const newDepth = Math.max(0, activeStructure.extrusionParams.depth + e.deltaY)\n                    const updatedStructure = { ...activeStructure, extrusionParams: { ...activeStructure.extrusionParams, depth: newDepth } }\n                    execute(\"update_structure\", { structure: updatedStructure})\n                    break;\n                default:\n                    break;\n            }\n        }\n    }, [gl, chatVisible, mode, activeObjectId, structures, mouseTravel])\n\n    return null\n}\n\nfunction MainCanvas({playerInfo}) {\n    const [chatVisible, setChatVisible] = useState(false)\n    const [activeObjectId, setActiveObjectId] = useState(null)\n    const [mouseTravel, setMouseTravel] = useState({x: 0, y:0})\n    const [t, setT] = useState(100)\n    const grassTexture = useMemo(() => new THREE.TextureLoader().load(\"rust2.jpg\"), [])\n    const [mode, setMode] = useState(Const.MODE_DEFAULT)\n    const [shiftDown, setShiftDown] = useState(false)\n    const {execute, state} = usePlayground()\n    const localPlayer = state.players[state.localPlayerId]\n\n    useEffect(() => {\n        execute(\"initialize\", {player: playerInfo})\n        console.log(\"executed initialize!\")\n    }, [playerInfo])\n\n    const handleMeshMouseMove = e => {\n\n        // Required so reac-three-fiber only processes the nearest mesh\n        e.stopPropagation()\n\n        execute(\"update_player_target\", {target: e.point, playerId: localPlayer.id})\n        MeshEvents.eventOccurred(MeshEvents.MOUSE_MOVE, e)\n    }\n    const handleMeshClick = e => {\n        e.stopPropagation()\n\n        MeshEvents.eventOccurred(MeshEvents.CLICK, e)\n    }\n    const handleMeshPointerOut = e => {\n        MeshEvents.eventOccurred(MeshEvents.POINTER_OUT, e)\n    }\n    const handleMeshPointerOver = e => {\n        MeshEvents.eventOccurred(MeshEvents.POINTER_OVER, e)\n    }\n\n    const finishStructure = structure => {\n        execute(\"update_structure\", {structure})\n        setMode(Const.MODE_EXTRUDE)\n        setActiveObjectId(structure.id)\n    }\n\n    const updateStructure = structure => {\n        console.log(\"calling update structure\", structure)\n        execute(\"update_structure\", {structure})\n        setActiveObjectId(null)\n        setMouseTravel({ x: 0, y: 0})\n        setMode(Const.MODE_DEFAULT)\n    }\n\n    const sendChatMessage = message => {\n        execute(\"send_chat_message\", message)\n    }\n\n    return (\n        <div className=\"main-canvas-container\">\n            <Canvas\n                style={{ backgroundColor: \"#789\" }}\n                gl={{ antialias: false, alpha: false}}\n                pixelRatio={window.devicePixelRatio}\n                camera={{ position: [0, 10, 10], near: 1, far: 4000 }}\n                shadowMap\n                onCreated={({ gl }) => {\n                    gl.toneMapping = THREE.Uncharted2ToneMapping\n                    gl.outputEncoding = THREE.sRGBEncoding\n                    gl.shadowMap.type = THREE.PCFSoftShadowMap\n                    gl.setClearColor(new THREE.Color(\"#667788\"))\n                }}\n            >\n                <Effects />\n\n                <InputHandler \n                    mode={mode}\n                    setMode={setMode}\n                    execute={execute}\n                    structures={state.structures}\n                    chatVisible={chatVisible}\n                    setChatVisible={setChatVisible}\n                    activeObjectId={activeObjectId}\n                    setActiveObjectId={setActiveObjectId}\n                    mouseTravel={mouseTravel}\n                    setMouseTravel={setMouseTravel}\n                    setT={setT}\n                    setShiftDown={setShiftDown}\n                />\n                <CameraController localPlayer={localPlayer} mode={mode} />\n\n                <fog attach=\"fog\" args={[0x667788, 500, 1500]} />\n                <ambientLight args={[0x666666]} />\n                <directionalLight\n                    args={[0xffffff, 7]}\n                    position={[0, 6000, 3000]}\n                    shadow-camera-left={-1000}\n                    shadow-camera-bottom={-1000}\n                    shadow-camera-right={1000}\n                    shadow-camera-top={1000}\n                    shadow-camera-near={1}\n                    shadow-camera-far={12000}\n                    shadow-mapSize-width={1024}\n                    shadow-mapSize-height={1024}\n                    castShadow\n                />\n\n                {Object.values(state.players).map(player => <Player key={player.id} t={t} player={player} isLocalPlayer={player.id === localPlayer.id} />)}\n\n                {mode === Const.MODE_DEFAULT &&\n                    <PartialStructure player={localPlayer} finishStructureFunc={finishStructure} />\n                }\n\n                {Object.values(state.structures).map(structure => <Structure \n                                                key={structure.id}\n                                                structure={structure}\n                                                updateStructure={updateStructure}\n                                                player={localPlayer}\n                                                onPointerMove={handleMeshMouseMove}\n                                                onClick={handleMeshClick}\n                                                onPointerOut={handleMeshPointerOut}\n                                                onPointerOver={handleMeshPointerOver}\n                                                mode={mode}\n                                                active={activeObjectId === structure.id}\n                                                shiftDown={shiftDown}\n                                                setMode={(mode, id) => {\n                                                    setMode(mode)\n                                                    if (id) setActiveObjectId(id)\n                                                }}\n                                                mouseTravel={mouseTravel}\n                                            />)}\n\n                <mesh receiveShadow \n                    rotation-x={- Math.PI / 2} \n                    onPointerMove={handleMeshMouseMove}\n                    onClick={handleMeshClick}\n                >\n                    <planeBufferGeometry attach=\"geometry\" args={[16000, 16000]} />\n                    <meshStandardMaterial attach=\"material\" color={0x333333} roughness={0.55} metalness={0.8}>\n                        <primitive attach=\"map\" object={grassTexture} repeat={[64, 64]} wrapS={THREE.RepeatWrapping} wrapT={THREE.RepeatWrapping} encoding={THREE.sRGBEncoding}/>\n                    </meshStandardMaterial>\n                </mesh>\n            </Canvas>\n            {chatVisible &&\n                <ChatWindow players={state.players} sendChatMessage={sendChatMessage} localPlayer={localPlayer} messages={state.messages} hideChat={() => setChatVisible(false)}/>\n            }\n        </div>\n    )\n}\n\nexport default MainCanvas","import React, {useState} from 'react';\nimport './LoginPrompt.css'\nimport {FormGroup, InputGroup, Button} from '@blueprintjs/core'\nimport Player from '../PlayerData'\n\nfunction LoginPrompt({logIn}) {\n    const [name, setName] = useState(\"\")\n\n    const handleTextChange = e => {\n        const text = e.target.value || \"\"\n        setName(text)\n    }\n\n    const handleKeyPress = e => e.which === 13 ? logIn(Player.create(name)) : \"\"\n\n    return (\n        <div className=\"login-container bp3-light\">\n            <FormGroup\n                label=\"Choose a name to use:\"\n            >\n                <InputGroup autoFocus placeholder=\"name...\" large onChange={handleTextChange} onKeyDown={handleKeyPress}/>\n            </FormGroup>\n\n            <Button onClick={() => {\n                logIn(Player.create(name))\n            }}>Join</Button>\n        </div>\n    )\n}\n\nexport default LoginPrompt","import React, {useState, useEffect} from 'react';\nimport MainCanvas from './MainCanvas'\nimport LoginPrompt from './components/LoginPrompt'\nimport Player from './PlayerData'\nimport './App.css';\n\nconst QUICK_START = true\n\nfunction App() {\n  const [loggedIn, setLoggedIn] = useState(false)\n  const [player, setPlayer] = useState(null)\n\n  const doLogin = (player) => {\n        setPlayer(player)\n        setLoggedIn(true)\n  }\n\n  useEffect(() => {\n      if (QUICK_START)\n          doLogin(Player.create())\n  }, [])\n\n  return (\n    <div className=\"App bp3-dark\">\n\n        {player &&\n          <MainCanvas playerInfo={player}/>\n        }\n\n        <div className=\"screen-container\">\n              {!loggedIn &&\n                  <LoginPrompt logIn={doLogin} />\n              }\n        </div>\n      \n      {/* This is for webcam capture/display stuff */}\n      {/* <canvas id=\"test-canvas\"></canvas>\n      <video id=\"video\" style={{ visibility: \"hidden\"}}></video> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}